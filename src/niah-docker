#!/usr/bin/python3
# Developed by : niah security inc
 
import time
import docker
import warnings
import configparser
import glob2
from github import Github
import os
import pyfiglet
from os import path
import random
import semantic_version
import ast
import sys
import re
import requests
from pkg_resources import parse_version
import json
import argparse
from tqdm import tqdm
from datetime import datetime
from prettytable import PrettyTable
from termcolor import colored
import socket
from pyfiglet import figlet_format
import platform

SERVER_IP="niahsecurity.online"

__all__ = ["getstatusoutput","getoutput","getstatus"]

def getstatus(file):
    """Return output of "ls -ld <file>" in a string."""
    import warnings
    warnings.warn("commands.getstatus() is deprecated", DeprecationWarning, 2)
    return getoutput('ls -ld' + mkarg(file))

def getoutput(cmd):
    """Return output (stdout or stderr) of executing cmd in a shell."""
    return getstatusoutput(cmd)[1]

def getstatusoutput(cmd):
    """Return (status, output) of executing cmd in a shell."""
    import os
    pipe = os.popen('{ ' + cmd + '; } 2>&1', 'r')
    text = pipe.read()
    sts = pipe.close()
    if sts is None: sts = 0
    if text[-1:] == '\n': text = text[:-1]
    return sts, text

def mk2arg(head, x):
    import os
    return mkarg(os.path.join(head, x))

def mkarg(x):
    if '\'' not in x:
        return ' \'' + x + '\''
    s = ' "'
    for c in x:
        if c in '\\$"`':
            s = s + '\\'
        s = s + c
    s = s + '"'
    return s


class niah_getDockerImage():
        def __init__(self, connType, connName):
                if not path.exists("/tmp/niah.json"):
                    print("[ INFO ] Autentication Failure, use 'niah auth' cli to login")
                    sys.exit(1)

                    with open('/tmp/niah.json') as f:
                        configData = json.load(f)

                    if 'connector' not in configData:
                        print("[ INFO ] Add connector using `niah connector ...`")
                        sys.exit(1)


                    if connType not in configData['connector']:
                        print("[ INFO ] connector not found")
                        sys.exit(1)
                    else:
                        if connType == "azure":
                                    status, output = commands.getstatusoutput('which az')
                                    if len(output) == 0:
                                        print("[ OK ] az tool is not installed! installation guide : https://docs.microsoft.com/en-us/cli/azure/install-azure-cli?view=azure-cli-latest")
                                        sys.exit(1)

                        if connType == "aws":
                                    status, output = commands.getstatusoutput('which aws')
                                    if len(output) == 0:
                                        print("[ OK ] aws tool is not installed! installation guide : https://aws.amazon.com/cli/")
                                        sys.exit(1)

                        connLists = []
                        for conn in configData['connector'][connType]:
                                if  conn['name'] == connName:
                                        connLists.append(conn['name'])

                        if len(connLists) == 0:
                                print("[ OK ] connection name not found")
                                sys.exit(1)


        def getImages(self, connType, connName, names, imgs, tags):
                print("[ OK ] Repository Images information gathering running, process take time to complete")
                if connType == "aws":
                        imagelists = self.getAWSImage(connName, names, imgs, tags)
                if connType == "azure":
                        imagelists = self.getAZImage(connName, names, imgs, tags)
                if connType == "docker":
                        imagelists = self.getDockerHubImage(connName, names, imgs, tags)
                if connType == "local":
                        imagelists = self.getLocalDockerImage(connName, imgs, tags)

                imageDetails = self.getimagesDetails(imagelists)
                return imageDetails


        def getimagesDetails(self, images):
                results = {}
                for connn in images:
                    results[connn] = []
                    for image in images[connn]:
                        imageName = image
                        if "/" in imageName:
                                container_name = imageName.split("/")[1]
                                container_name = container_name.replace(":", "_")
                        else:
                                container_name = imageName.replace(":", "_")

                        container_name = container_name.replace("@", "_")

                        cmd = 'docker run --name %s -it -d %s' % (container_name, imageName)
                        status, output = getstatusoutput(cmd)
                        data = output

                        cmd = 'docker export %s > /tmp/%s.tar' % (container_name, container_name)
                        status, output = getstatusoutput(cmd)
                        data = output

                        cmd = 'docker rm --force %s' % (container_name)
                        status, output = getstatusoutput(cmd)
                        data = output

                        cmd = 'mkdir /tmp/%s' % container_name
                        status, output = getstatusoutput(cmd)
                        data = output

                        cmd = 'sudo tar -xf /tmp/%s.tar -C /tmp/%s/' % (container_name, container_name)
                        status, output = getstatusoutput(cmd)
                        data = output

                        cmd = 'sudo rm -rf /tmp/%s.tar' % (container_name)
                        status, output = getstatusoutput(cmd)
                        data = output

                        cmd = 'cat /tmp/%s/etc/os-release' % container_name
                        status, output = getstatusoutput(cmd)
                        data = output

                        cmd = 'sudo tar -xf /tmp/%s.tar -C /tmp/%s/' % (container_name, container_name)
                        status, output = getstatusoutput(cmd)
                        data = output

                        cmd = 'cat /tmp/%s/etc/os-release' % container_name
                        status, output = getstatusoutput(cmd)
                        data = output

                        os_name = re.findall(r'^ID=(.*)', str(data), flags=re.MULTILINE)[0]
                        os_version = re.findall(r'^VERSION_ID=(.*)', str(data), flags=re.MULTILINE)[0]
                        if os_name.strip() == "debian":
                                os_type = re.findall(r'^VERSION=\"\d+\s+\((.*)\)\"', str(data), flags=re.MULTILINE)[0]
                        elif  os_name.strip() == "ubuntu":
                                os_type = re.findall(r'PRETTY_NAME=\"(.*)\"', str(data), flags=re.MULTILINE)[0]
                        else:
                                os_type = ''

                        imageName = str(imageName)

                        res = {}
                        res['imagename'] = imageName
                        res['os_name'] = str(os_name.strip())
                        res['os_version'] = str(os_version.replace('"', '').strip())
                        res['os_type'] = str(os_type.replace('"', '').strip())
                        res['location'] = "/tmp/%s" % container_name
                        results[connn].append(res)

                return results

        def getLocalDockerImage(self, connName, imgs, tags):
                resArray = {}
                resArray[connName] = []

                client = docker.from_env()
                for image in client.images.list():
                        for imagename in image.tags:
                                imgName = imagename.split(":")[0]
                                tagName = imagename.split(":")[1]
                                if imgs and tags:
                                        if imgs == imgName and tags == tagName:
                                                resArray[connName].append(imagename)
                                elif imgs and not tags:
                                        if imgs == imgName:
                                                resArray[connName].append(imagename)
                                elif not imgs and tags:
                                        if tags == tagName:
                                                resArray[connName].append(imagename)
                                else:
                                        print("[ OK ] image not found in local system")
                                        sys.exit(1)

                return resArray

        def getDockerHubImage(self, connName, names, imgs, tags):
                with open('/tmp/niah.json') as f:
                    configData = json.load(f)
                connlists = []
                for cdata in configData['connector']['docker']:
                        name = cdata['name']
                        authUser = cdata['uid']
                        authPass = cdata['secret']
                        authUrl = cdata['url']
                        res = {}
                        res['name'] = name
                        res['authUser'] = authUser
                        res['authPass'] = authPass
                        res['authUrl'] = authUrl
                        if not connName:
                                connlists.append(res)
                        else:
                                if connName == name:
                                        connlists.append(res)

                if len(connlists) == 0:
                        print("[ OK ] Specified connection name does not found")
                        sys.exit(1)

                resArray = {}
                for connn in connlists:
                        cname = connn['name']
                        authUser = connn['authUser']
                        authPass = connn['authPass']
                        authUrl = connn['authUrl']

                        client = docker.from_env()
                        if authUser:
                                client.login(username=authUser, password=authPass)

                        if not authUrl:
                                authUrl = "hub.docker.com"

                        headers = {
                                'Content-Type': 'application/json',
                        }

                        data = '{"username": "%s", "password": "%s"}' % (authUser, authPass)

                        response = requests.post('https://%s/v2/users/login/' % authUrl, headers=headers, data=data)

                        resp = json.loads(response.text)
                        token = resp['token']

                        headers = {'Authorization': 'JWT %s' % token}
                        response = requests.get('https://%s/v2/repositories/namespaces/' % authUrl, headers=headers)
                        namespaces = json.loads(response.text)

                        params = (
                                ('page_size', '10000'),
                        )

                        
                        resArray[cname] = []
                        if names:
                            for namespace in namespaces["namespaces"]:
                                if re.findall(r'%s' % names, str(namespace)):
                                        response = requests.get('https://%s/v2/repositories/%s/' % (authUrl, namespace), headers=headers, params=params)
                                        imgNames = json.loads(response.text)
                                        if imgs:
                                                for img in imgNames['results']:
                                                        if re.findall(r'%s' % imgs, str(img)):
                                                                imgName = img['name']
                                                                response = requests.get('https://%s/v2/repositories/%s/%s/tags/' % (authUrl, namespace, imgName), headers=headers, params=params)
                                                                tagNames = json.loads(response.text)
                                                                if tags:
                                                                        for tag in tagNames['results']:
                                                                                if re.findall(r'%s' % tags, str(tag)):
                                                                                        tagsName = tag['name']
                                                                                        imageName = "%s/%s:%s" % (namespace, imgName, tagsName)
                                                                                        client.images.pull("%s" % (imageName))
                                                                                        resArray[cname].append(imageName)
                                                                else:
                                                                        for tag in tagNames['results']:
                                                                                tagsName = tag['name']
                                                                                imageName = "%s/%s:%s" % (namespace, imgName, tagsName)
                                                                                client.images.pull("%s" % (imageName))
                                                                                resArray[cname].append(imageName)
                                        else:
                                                for img in imgNames['results']:
                                                        imgName = img['name']
                                                        response = requests.get('https://%s/v2/repositories/%s/%s/tags/' % (authUrl, namespace, imgName), headers=headers, params=params)
                                                        tagNames = json.loads(response.text)
                                                        if tags:
                                                                for tag in tagNames['results']:
                                                                        if re.findall(r'%s' % tags, str(tag)):
                                                                                tagsName = tag['name']
                                                                                imageName = "%s/%s:%s" % (namespace, imgName, tagsName)
                                                                                client.images.pull("%s" % (imageName))
                                                                                resArray[cname].append(imageName)
                                                        else:
                                                                for tag in tagNames['results']:
                                                                        tagsName = tag['name']
                                                                        imageName = "%s/%s:%s" % (namespace, imgName, tagsName)
                                                                        client.images.pull("%s" % (imageName))
                                                                        resArray[cname].append(imageName)
                        else:
                            for namespace in namespaces["namespaces"]:
                                response = requests.get('https://%s/v2/repositories/%s/' % (authUrl, namespace), headers=headers, params=params)
                                imgNames = json.loads(response.text)
                                if imgs:
                                        for img in imgNames['results']:
                                                if re.findall(r'%s' % imgs, str(img)):
                                                        imgName = img['name']
                                                        response = requests.get('https://%s/v2/repositories/%s/%s/tags/' % (authUrl, namespace, imgName), headers=headers, params=params)
                                                        tagNames = json.loads(response.text)
                                                        if tags:
                                                                for tag in tagNames['results']:
                                                                        if re.findall(r'%s' % tags, str(tag)):
                                                                                tagsName = tag['name']
                                                                                imageName = "%s/%s:%s" % (namespace, imgName, tagsName)
                                                                                client.images.pull("%s" % (imageName))
                                                                                resArray[cname].append(imageName)
                                                        else:
                                                                for tag in tagNames['results']:
                                                                        tagsName = tag['name']
                                                                        imageName = "%s/%s:%s" % (namespace, imgName, tagsName)
                                                                        client.images.pull("%s" % (imageName))
                                                                        resArray[cname].append(imageName)
                                else:
                                        for img in imgNames['results']:
                                                imgName = img['name']
                                                response = requests.get('https://%s/v2/repositories/%s/%s/tags/' % (authUrl, namespace, imgName), headers=headers, params=params)
                                                tagNames = json.loads(response.text)
                                                if tags:
                                                        for tag in tagNames['results']:
                                                                if re.findall(r'%s' % tags, str(tag)):
                                                                        tagsName = tag['name']
                                                                        imageName = "%s/%s:%s" % (namespace, imgName, tagsName)
                                                                        client.images.pull("%s" % (imageName))
                                                                        resArray[cname].append(imageName)
                                                else:
                                                        for tag in tagNames['results']:
                                                                tagsName = tag['name']
                                                                imageName = "%s/%s:%s" % (namespace, imgName, tagsName)
                                                                client.images.pull("%s" % (imageName))
                                                                resArray[cname].append(imageName)



                return resArray

        def getAZImage(self, connName, names, imgs, tags):
                with open('/tmp/niah.json') as f:
                    configData = json.load(f)
                connlists = []
                for cdata in configData['connector']['azure']:
                        name = cdata['name']
                        authUser = cdata['uid']
                        authPass = cdata['secret']
                        reponame = cdata['reponame']
                       
                        res = {}
                        res['name'] = name
                        res['authUser'] = authUser
                        res['authPass'] = authPass
                        res['reponame'] = reponame
                        if not connName:
                                connlists.append(res)
                        else:
                                if connName == name:
                                        connlists.append(res)

                if len(connlists) == 0:
                        print("[ OK ] Specified connection name does not found")
                        sys.exit(1)

                resArray = {}
                
                for connn in connlists:
                        cname = connn['name']
                        authUser = connn['authUser']
                        authPass = connn['authPass']
                        reponame = connn['reponame']
                        
                        client = docker.from_env()

                        """
                        cmd = 'sudo az acr login --username %s --password %s --name %s' % (authUser, authPass, reponame)
                        print(cmd)
                        status, output = getstatusoutput(cmd)
                        print(output)
                        if not re.findall(r'Login Succeeded', str(output)):
                                print("[ OK ] Check Azure credential, something wrong!")
                                sys.exit(1)

                        cmd = 'az acr repository list --username %s --password %s --name %s --out json > /tmp/azure' % (authUser, authPass, reponame)
                        print(cmd)
                        status, output = getstatusoutput(cmd)

                        cmd = "cat /tmp/azure"
                        status, output = getstatusoutput(cmd)
                        output = json.loads(output)  
                        """
                        resArray[cname] = []

                        cmd = "az acr list"
                        status, output = getstatusoutput(cmd)
                        if re.findall(r'az login', str(output)):
                                cmd = "az login -u %s -p %s" % (authUser, authPass)
                                status, output = getstatusoutput(cmd)
                                if re.findall(r'interaction_required', str(output)):
                                        print("[ OK ] Multi factor Authentication enabled in your account, so please use `az login` command to login")
                                        sys.exit(1)
                                
                                print("[ OK ] Authentication failed, so please use `az login` command to login")
                                sys.exit(1)

                        output = json.loads(output)
                        if len(output) == 0:
                                print("[ INFO ] Not found any container registry/namespace")
                                sys.exit(1)
                        
        
                        if names:
                            for cRegistry in output:
                                container_registry = cRegistry['name']
                                login_server = cRegistry['loginServer']
                                if re.findall(r'%s' % names, str(container_registry)):
                                        cmd = "az acr repository list --name %s" % (container_registry)
                                        print(cmd)
                                        status, output = getstatusoutput(cmd)
                                        output = json.loads(output)
                                        print(output)
                                        if imgs:
                                            for imagename  in output:
                                                if re.findall(r'%s' % imgs, str(imagename)):
                                                        cmd = "az acr repository show-tags -n %s --repository %s" % (container_registry, imagename)
                                                        print(cmd)
                                                        status, output = getstatusoutput(cmd)
                                                        output = json.loads(output)
                                                        print(output)

                                                        if tags:
                                                            for tag in output:
                                                                if re.findall(r'%s' % tags, str(tag)):
                                                                        imageName = "%s/%s:%s" % (login_server, imagename, tag)
                                                                        print(imageName)
                                                                        client.images.pull("%s" % (imageName))
                                                                        resArray[cname].append(imageName)
                                                        else:
                                                            for tag in output:
                                                                imageName = "%s/%s:%s" % (login_server, imagename, tag)
                                                                print(imageName)
                                                                client.images.pull("%s" % (imageName))
                                                                resArray[cname].append(imageName)
                                        else:
                                            for imagename  in output:
                                                cmd = "az acr repository show-tags -n %s --repository %s" % (container_registry, imagename)
                                                print(cmd)
                                                status, output = getstatusoutput(cmd)
                                                output = json.loads(output)
                                                print(output)
                                                if tags:
                                                    for tag in output:
                                                        if re.findall(r'%s' % tags, str(tag)):
                                                                imageName = "%s/%s:%s" % (login_server, imagename, tag)
                                                                print(imageName)
                                                                client.images.pull("%s" % (imageName))
                                                                resArray[cname].append(imageName)
                                                else:
                                                    for tag in output:
                                                        imageName = "%s/%s:%s" % (login_server, imagename, tag)
                                                        print(imageName)
                                                        client.images.pull("%s" % (imageName))
                                                        resArray[cname].append(imageName)
                        else:
                            for cRegistry in output:
                                container_registry = cRegistry['name']
                                login_server = cRegistry['loginServer']
                                cmd = "az acr repository list --name %s" % (container_registry)
                                print(cmd)
                                status, output = getstatusoutput(cmd)
                                output = json.loads(output)
                                print(output)
                                if imgs:
                                    for imagename  in output:
                                        if re.findall(r'%s' % imgs, str(imagename)):
                                                cmd = "az acr repository show-tags -n %s --repository %s" % (container_registry, imagename)
                                                print(cmd)
                                                status, output = getstatusoutput(cmd)
                                                output = json.loads(output)
                                                print(output)
                                                if tags:
                                                    for tag in output:
                                                        if re.findall(r'%s' % tags, str(tag)):
                                                                imageName = "%s/%s:%s" % (login_server, imagename, tag)
                                                                print(imageName)
                                                                client.images.pull("%s" % (imageName))
                                                                resArray[cname].append(imageName)
                                                else:
                                                    for tag in output:
                                                        imageName = "%s/%s:%s" % (login_server, imagename, tag)
                                                        print(imageName)
                                                        client.images.pull("%s" % (imageName))
                                                        resArray[cname].append(imageName)
                                else:
                                    for imagename  in output:
                                        cmd = "az acr repository show-tags -n %s --repository %s" % (container_registry, imagename)
                                        print(cmd)
                                        status, output = getstatusoutput(cmd)
                                        output = json.loads(output)
                                        print(output)
                                        if tags:
                                            for tag in output:
                                                if re.findall(r'%s' % tags, str(tag)):
                                                        imageName = "%s/%s:%s" % (login_server, imagename, tag)
                                                        print(imageName)
                                                        client.images.pull("%s" % (imageName))
                                                        resArray[cname].append(imageName)
                                        else:
                                            for tag in output:
                                                imageName = "%s/%s:%s" % (login_server, imagename, tag)
                                                print(imageName)
                                                client.images.pull("%s" % (imageName))
                                                resArray[cname].append(imageName)
                                                                                                
                return resArray

        def getAWSImage(self, connName, names, imgs, tags):
                with open('/tmp/niah.json') as f:
                    configData = json.load(f)
                connlists = []
                for cdata in configData['connector']['aws']:
                        name = cdata['name']
                        authUser = cdata['uid']
                        authPass = cdata['secret']
                        authUrl = cdata['url']
                        authRegion = cdata['region']
                        res = {}
                        res['name'] = name
                        res['authUser'] = authUser
                        res['authPass'] = authPass
                        res['authUrl'] = authUrl
                        res['authRegion'] = authRegion
                        res['region'] = authRegion
                        if not connName:
                                connlists.append(res)
                        else:
                                if connName == name:
                                        connlists.append(res)

                if len(connlists) == 0:
                        print("[ OK ] Specified connection name does not found")
                        sys.exit(1)

                resArray = {}
                for connn in connlists:
                        cname = connn['name']
                        authUser = connn['authUser']
                        authPass = connn['authPass']
                        authUrl = connn['authUrl']
                        region = connn['region']
                        
                        client = docker.from_env()
                        
                        config = configparser.ConfigParser()
                        config.add_section('default')
                        config.set('default', 'aws_access_key_id', '%s' % authUser)
                        config.set('default', 'aws_secret_access_key', '%s' % authPass)

                        filename = os.path.abspath("~/.aws/credentials")
                        filename = filename.replace("~/", "")
                        with open(filename, 'w') as configfile:
                                config.write(configfile)

                        try:
                                cmd = 'sudo /usr/local/bin/aws ecr get-login-password --region %s | sudo docker login --username AWS --password-stdin %s' % (region, authUrl)
                                status, output = getstatusoutput(cmd)
                                if not re.findall(r'Login Succeeded', str(output)):
                                        print("[ OK ] Check AWS credential, something wrong!")
                                        sys.exit(1)
                        except:
                                print("[ INFO ] Getting trouble in aws login, please use 'aws ecr' command and try to login manually and run scanner again.")
                                sys.exit(1)

                        cmd = 'aws ecr describe-repositories'
                        status, output = getstatusoutput(cmd)
                        output = json.loads(output)
                        resArray[cname] = []
                        if names:
                            for repo in output['repositories']:
                                repoName = repo['repositoryName']
                                if re.findall(r'%s' % names, str(repoName)):
                                        cmd = 'aws ecr describe-images --repository-name %s' % repoName
                                        status, output = getstatusoutput(cmd)
                                        output = json.loads(output)
                                        for imgDetail in output['imageDetails']:
                                                sha256Id = imgDetail['imageDigest']
                                                if imgs:
                                                        if imgs == sha256Id:
                                                                if 'imageTags' in imgDetail:
                                                                        if tags:
                                                                                for tag in imgDetail['imageTags']:
                                                                                        if re.findall(r'%s' % tags, str(tag)):
                                                                                                tagName = tag
                                                                                                imageName = "%s:%s" % (authUrl, tagName)
                                                                                                client.images.pull("%s" % (imageName))
                                                                                                resArray[cname].append(imageName)
                                                                        else:
                                                                                for tag in imgDetail['imageTags']:
                                                                                        tagName = tag
                                                                                        imageName = "%s:%s" % (authUrl, tagName)
                                                                                        client.images.pull("%s" % (imageName))
                                                                                        resArray[cname].append(imageName)
                                                                else:
                                                                        imageName = "%s@%s" % (authUrl, sha256Id)
                                                                        client.images.pull("%s" % (imageName))
                                                                        resArray[cname].append(imageName)
                                                else:
                                                        if 'imageTags' in imgDetail:
                                                                if tags:
                                                                        for tag in imgDetail['imageTags']:
                                                                                if re.findall(r'%s' % tags, str(tag)):
                                                                                        tagName = tag
                                                                                        imageName = "%s:%s" % (authUrl, tagName)
                                                                                        client.images.pull("%s" % (imageName))
                                                                                        resArray[cname].append(imageName)
                                                                else:
                                                                        for tag in imgDetail['imageTags']:
                                                                                tagName = tag
                                                                                imageName = "%s:%s" % (authUrl, tagName)
                                                                                client.images.pull("%s" % (imageName))
                                                                                resArray[cname].append(imageName)
                                                        else:
                                                                imageName = "%s@%s" % (authUrl, sha256Id)
                                                                client.images.pull("%s" % (imageName))
                                                                resArray[cname].append(imageName)

                        else:
                            for repo in output['repositories']:
                                repoName = repo['repositoryName']
                                cmd = 'aws ecr describe-images --repository-name %s' % repoName
                                status, output = getstatusoutput(cmd)
                                output = json.loads(output)
                                for imgDetail in output['imageDetails']:
                                        sha256Id = imgDetail['imageDigest']
                                        if imgs:
                                                if imgs == sha256Id:
                                                        if 'imageTags' in imgDetail:
                                                                if tags:
                                                                        for tag in imgDetail['imageTags']:
                                                                                if re.findall(r'%s' % tags, str(tag)):
                                                                                        tagName = tag
                                                                                        imageName = "%s:%s" % (authUrl, tagName)
                                                                                        client.images.pull("%s" % (imageName))
                                                                                        resArray[cname].append(imageName)
                                                                else:
                                                                        for tag in imgDetail['imageTags']:
                                                                                tagName = tag
                                                                                imageName = "%s:%s" % (authUrl, tagName)
                                                                                client.images.pull("%s" % (imageName))
                                                                                resArray[cname].append(imageName)
                                                        else:
                                                                imageName = "%s@%s" % (authUrl, sha256Id)
                                                                client.images.pull("%s" % (imageName))
                                                                resArray[cname].append(imageName)
                                        else:
                                                if 'imageTags' in imgDetail:
                                                        if tags:
                                                                for tag in imgDetail['imageTags']:
                                                                        if re.findall(r'%s' % tags, str(tag)):
                                                                                tagName = tag
                                                                                imageName = "%s:%s" % (authUrl, tagName)
                                                                                client.images.pull("%s" % (imageName))
                                                                                resArray[cname].append(imageName)
                                                        else:
                                                                for tag in imgDetail['imageTags']:
                                                                        tagName = tag
                                                                        imageName = "%s:%s" % (authUrl, tagName)
                                                                        client.images.pull("%s" % (imageName))
                                                                        resArray[cname].append(imageName)
                                                else:
                                                        imageName = "%s@%s" % (authUrl, sha256Id)
                                                        client.images.pull("%s" % (imageName))
                                                        resArray[cname].append(imageName)

                return resArray

                

class niah_getinventory():
        def __init__(self):
                pass

        def checkrequire(self, devP):
                results = []
                if 'requires' in devP:
                        for reqP in devP['requires']:
                                res = {}
                                product = reqP
                                version = devP['requires'][reqP]
                                res['product'] = product
                                res['version'] = version
                                results.append(res)

                return results


        def checkDependancies(self, devP):
                results = []
                if 'dependencies' in devP:
                        devData = devP['dependencies']
                        for devP in devData:
                                res = {}
                                devPProduct = devP
                                devPVersion = devData[devP]['version']
                                res['product'] = devPProduct
                                res['version'] = devPVersion
                                results.append(res)

                return results

        def getInstallPkgList(self, sourcefolder, dockerimage, language=False):
                    packagesResults = {}
                    if not language or language == "java":
                        packagesResults['java'] = {}
                        packagesResults['java']['inventory'] = []
                        packagesResults['java']['packages'] = []
                        packagesResults['java']['testedWidth'] = []
                        packagesResults['java']['dependancy'] = {}


                        for file in glob2.glob('%s/**/*.jar' % (sourcefolder), recursive=True):
                                res = {}
                                product = ''
                                version = ''
                                file = os.path.abspath(file)
                                filename = os.path.basename(file)

                                if re.findall(r'(.*?)-(\d.*?)\.jar', str(filename)):
                                        productversions = re.findall(r'(.*?)-(\d.*?)\.jar', str(filename))[0]
                                        product = productversions[0]
                                        version = productversions[1]

                                cmd = 'unzip -p %s META-INF/MANIFEST.MF' % (file)
                                status, output = getstatusoutput(cmd)

                                if not product:
                                        if re.findall(r'^(.*)-\d', str(filename)):
                                                product = re.findall(r'^(.*)-\d', str(filename))[0]

                                if not version:
                                        if re.findall(r'((?:(?:\d+)[.]){1,}(?:\d+).*).jar', str(filename)):
                                                version = re.findall(r'((?:(?:\d+)[.]){1,}(?:\d+).*).jar', str(filename))[0]
                                        elif re.findall(r'-(\d+).jar', str(filename)):
                                                version = re.findall(r'-(\d+).jar', str(filename))[0]
                                        else:
                                                version = ''

                                bundle_name = ''
                                bundle_version = ''
                                bundle_sym_name = ''

                                if re.findall(r'Bundle-Name:\s+(.*)', str(output)):
                                        bundle_name = re.findall(r'Bundle-Name:\s+(.*)', str(output))[0]
                                        bundle_name = bundle_name.strip()
                                if re.findall(r'Bundle-Version:\s+(.*)', str(output)):
                                        bundle_version = re.findall(r'Bundle-Version:\s+(.*)', str(output))[0]
                                        bundle_version = bundle_version.strip()
                                if re.findall(r'Bundle-SymbolicName:\s+(.*)',  str(output)):
                                        bundle_sym_name = re.findall(r'Bundle-SymbolicName:\s+(.*)',  str(output))[0]
                                        bundle_sym_name = bundle_sym_name.strip()

                                res['location'] = file
                                res['filename'] = filename
                                res['product'] = product
                                res['versions'] = version
                                res['bundle_name'] = bundle_name
                                res['bundle_version'] = bundle_version
                                res['bundle_sym_name'] = bundle_sym_name

                                if res not in packagesResults['java']['inventory']:
                                        packagesResults['java']['inventory'].append(res)

                                if product:
                                    if product not in packagesResults['java']['packages']:
                                        packagesResults['java']['packages'].append(product)

                                if bundle_name:
                                    if bundle_name not in packagesResults['java']['packages']:
                                        packagesResults['java']['packages'].append(bundle_name)

                                if bundle_sym_name:
                                    if bundle_sym_name not in packagesResults['java']['packages']:
                                        packagesResults['java']['packages'].append(bundle_sym_name)



                    if not language or language == "python":
                        packagesResults['python'] = {}
                        packagesResults['python']['inventory'] = []
                        packagesResults['python']['packages'] = []
                        packagesResults['python']['testedWidth'] = []
                        packagesResults['python']['dependancy'] = {}

                        for file in glob2.glob('%s/**/require*.txt' % (sourcefolder), recursive=True):
                                file = os.path.abspath(file)
                                filename = os.path.basename(file)

                                if filename not in packagesResults['python']['testedWidth']:
                                        packagesResults['python']['testedWidth'].append(filename)

                                fileData = open(file)

                                for lineFile in fileData.readlines():
                                        for strLine in lineFile.split(";"):
                                                if re.findall(r'(.*)(>=|==)(.*)', str(strLine)):
                                                        details = re.findall(r'(.*)(>=|==)(.*)', str(strLine))[0]
                                                        product = details[0]
                                                        versions = "%s%s" % (details[1].replace("'",""), details[2].replace("'", ""))
                                                        res = {}
                                                        res['product'] = product.strip()
                                                        res['versions'] = versions.replace(" ", "")
                                                        res['location'] = file
                                                        if res not in packagesResults['python']['inventory']:
                                                                packagesResults['python']['inventory'].append(res)
                                                        if product.strip() not in packagesResults['python']['packages']:
                                                                packagesResults['python']['packages'].append(product.strip())


                    if not language or language == "php":
                        packagesResults['php'] = {}
                        packagesResults['php']['inventory'] = []
                        packagesResults['php']['packages'] = []
                        packagesResults['php']['testedWidth'] = []
                        packagesResults['php']['dependancy'] = {}

                        for file in glob2.glob('%s/**/composer.*' % (sourcefolder), recursive=True):
                            file = os.path.abspath(file)
                            filename = os.path.basename(file)


                            if filename == "composer.lock":
                                if os.stat(file).st_size != 0:
                                    with open(file) as f:
                                        data = json.load(f)

                                    if filename not in packagesResults['php']['testedWidth']:
                                        packagesResults['php']['testedWidth'].append(filename)

                                    if 'packages' in data:
                                        for pkg in data['packages']:
                                            package_name = pkg['name']

                                            if "/" in package_name:
                                                if package_name not in packagesResults['php']['packages']:
                                                    packagesResults['php']['packages'].append(package_name)

                                                vendor = package_name.split("/")[0]
                                                product = package_name.split("/")[1]
                                                versions = pkg['version']

                                                res = {}
                                                res['product'] = product
                                                res['vendor'] = vendor
                                                res['versions'] = versions
                                                res['location'] = file
                                                packagesResults['php']['inventory'].append(res)


                                                if 'require' in pkg:
                                                    for d in pkg['require']:
                                                        if "/" in d:
                                                            if d not in packagesResults['php']['packages']:
                                                                packagesResults['php']['packages'].append(d)

                                                            vendor1 = d.split("/")[0]
                                                            product1 = d.split("/")[1]
                                                            versions1 = pkg['require'][d]

                                                            res = {}
                                                            res['product'] = product1
                                                            res['vendor'] = vendor1
                                                            res['versions'] = versions1
                                                            res['location'] = file
                                                            packagesResults['php']['inventory'].append(res)

                                                            if d not in packagesResults['php']['dependancy']:
                                                                packagesResults['php']['dependancy'][d] = []

                                                            if "%s@%s" % (str(package_name), str(versions)) not in packagesResults['php']['dependancy'][d]:
                                                                packagesResults['php']['dependancy'][d].append("%s@%s" % (str(package_name), str(versions)))

                                                if 'require-dev' in pkg:
                                                    for d in pkg['require-dev']:
                                                        if "/" in d:
                                                            if d not in packagesResults['php']['packages']:
                                                                packagesResults['php']['packages'].append(d)

                                                            vendor2 = d.split("/")[0]
                                                            product2 = d.split("/")[1]
                                                            versions2 = pkg['require-dev'][d]

                                                            res = {}
                                                            res['product'] = product2
                                                            res['vendor'] = vendor2
                                                            res['versions'] = versions2
                                                            res['location'] = file
                                                            packagesResults['php']['inventory'].append(res)

                                                            if d not in packagesResults['php']['dependancy']:
                                                                packagesResults['php']['dependancy'][d] = []

                                                            if "%s@%s" % (str(package_name), str(versions)) not in packagesResults['php']['dependancy'][d]:
                                                                packagesResults['php']['dependancy'][d].append("%s@%s" % (str(package_name), str(versions)))

                            if filename == "composer.json":
                                if os.stat(file).st_size != 0:
                                    with open(file) as f:
                                        data = json.load(f)

                                    if filename not in packagesResults['php']['testedWidth']:
                                        packagesResults['php']['testedWidth'].append(filename)

                                    if 'require' in data:
                                        for d in data['require']:
                                            if "/" in d:
                                                if d not in packagesResults['php']['packages']:
                                                    packagesResults['php']['packages'].append(d)

                                                vendor3 = d.split("/")[0]
                                                product3 = d.split("/")[1]
                                                versions3 = data['require'][d]

                                                res = {}
                                                res['product'] = product3
                                                res['vendor'] = vendor3
                                                res['versions'] = versions3
                                                res['location'] = file
                                                packagesResults['php']['inventory'].append(res)


                                    if 'require-dev' in data:
                                        for d in data['require-dev']:
                                            if "/" in d:
                                                if d not in packagesResults['php']['packages']:
                                                    packagesResults['php']['packages'].append(d)

                                                vendor4 = d.split("/")[0]
                                                product4 = d.split("/")[1]
                                                versions4 = data['require-dev'][d]

                                                res = {}
                                                res['product'] = product3
                                                res['vendor'] = vendor3
                                                res['versions'] = versions3
                                                res['location'] = file
                                                packagesResults['php']['inventory'].append(res)


                    if not language or language == "javascript":
                        packagesResults['javascript'] = {}
                        packagesResults['javascript']['inventory'] = []
                        packagesResults['javascript']['packages'] = []
                        packagesResults['javascript']['testedWidth'] = []
                        packagesResults['javascript']['dependancy'] = {}

                        for file in glob2.glob('%s/**/package*.json' % (sourcefolder), recursive=True):
                                file = os.path.abspath(file)
                                filename = os.path.basename(file)

                                if filename not in packagesResults['javascript']['testedWidth']:
                                        packagesResults['javascript']['testedWidth'].append(filename)


                                with open(file) as f:
                                        data = json.load(f)

                                if 'lockfileVersion' in data:
                                        if 'dependencies' in data:
                                                results = []
                                                devData = data['dependencies']
                                                for devP in devData:
                                                        try:
                                                            devPProduct = devP
                                                            devPVersion = devData[devP]['version']
                                                        except:
                                                            devPProduct = devP
                                                            devPVersion = devData[devP]

                                                        res = {}
                                                        res['product'] = devPProduct
                                                        res['version'] = devPVersion
                                                        results.append(res)

                                                        if '%s@%s' % (devPProduct, devPVersion) not in packagesResults['javascript']['dependancy']:
                                                                packagesResults['javascript']['dependancy']['%s@%s' % (devPProduct, devPVersion)] = []

                                                        if 'requires' in devData[devP]:
                                                                checkRequires = self.checkrequire(devData[devP])
                                                                for checkreq in checkRequires:
                                                                    try:
                                                                        product = checkreq['product']
                                                                        version = checkreq['version']
                                                                        if '%s@%s' % (product, version) not in packagesResults['javascript']['dependancy']:
                                                                                packagesResults['javascript']['dependancy']['%s@%s' % (product, version)] = []
                                                                        packagesResults['javascript']['dependancy']['%s@%s' % (product, version)].append('%s@%s' % (devPProduct, devPVersion))

                                                                        results.append(checkreq)
                                                                    except:
                                                                           pass

                                                        if 'dependencies' in devData[devP]:
                                                                checkDependancy = self.checkDependancies(devData[devP])
                                                                for checkdep in checkDependancy:
                                                                        devPProduct1 = checkdep['product']
                                                                        devPVersion1 = checkdep['version']
                                                                        results.append(checkdep)
                                                                        if '%s@%s' % (devPProduct1, devPVersion1) not in packagesResults['javascript']['dependancy']:
                                                                                packagesResults['javascript']['dependancy']['%s@%s' % (devPProduct1, devPVersion1)] = []
                                                                        packagesResults['javascript']['dependancy']['%s@%s' % (devPProduct1, devPVersion1)].append('%s@%s' % (devPProduct, devPVersion))

                                                                        if 'requires' in devData[devP]['dependencies'][checkdep['product']]:
                                                                                checkRequires = self.checkrequire(devData[devP]['dependencies'][checkdep['product']])
                                                                                for checkreq in checkRequires:
                                                                                        product = checkreq['product']
                                                                                        version = checkreq['version']
                                                                                        results.append(checkreq)
                                                                                        if '%s@%s' % (product, version) not in packagesResults['javascript']['dependancy']:
                                                                                                packagesResults['javascript']['dependancy']['%s@%s' % (product, version)] = []
                                                                                        packagesResults['javascript']['dependancy']['%s@%s' % (product, version)].append('%s@%s ==> %s@%s' % (devPProduct1, devPVersion1, devPProduct, devPVersion))

                                                                        if 'dependencies' in devData[devP]['dependencies'][checkdep['product']]:
                                                                                checkDependancy1 = self.checkDependancies(devData[devP]['dependencies'][checkdep['product']])
                                                                                for checkdep1 in checkDependancy1:
                                                                                        devPProduct2 = checkdep1['product']
                                                                                        devPVersion2 = checkdep1['version']
                                                                                        results.append(checkdep1)
                                                                                        if '%s@%s' % (devPProduct2, devPVersion2) not in packagesResults['javascript']['dependancy']:
                                                                                                packagesResults['javascript']['dependancy']['%s@%s' % (devPProduct2, devPVersion2)] = []
                                                                                        packagesResults['javascript']['dependancy']['%s@%s' % (devPProduct2, devPVersion2)].append('%s@%s ==> %s@%s' % (devPProduct1, devPVersion1, devPProduct, devPVersion))

                                                                                        if 'requires' in devData[devP]['dependencies'][checkdep['product']]['dependencies'][checkdep1['product']]:
                                                                                                checkRequires1 = self.checkrequire(devData[devP]['dependencies'][checkdep['product']]['dependencies'][checkdep1['product']])
                                                                                                for checkreq1 in checkRequires1:
                                                                                                        product = checkreq1['product']
                                                                                                        version = checkreq1['version']
                                                                                                        results.append(checkreq1)
                                                                                                        if '%s@%s' % (product, version) not in packagesResults['javascript']['dependancy']:
                                                                                                                packagesResults['javascript']['dependancy']['%s@%s' % (product, version)] = []
                                                                                                        packagesResults['javascript']['dependancy']['%s@%s' % (product, version)].append('%s@%s ==> %s@%s ==> %s@%s' % (devPProduct2, devPVersion2, devPProduct1, devPVersion1, devPProduct, devPVersion))

                                                for res in results:
                                                        product = res['product']
                                                        versions = res['version']
                                                        location = file
                                                        res['product'] = product
                                                        res['versions'] = versions
                                                        res['location'] = location
                                                        packagesResults['javascript']['inventory'].append(res)
                                                        if product not in packagesResults['javascript']['packages']:
                                                                packagesResults['javascript']['packages'].append(product)

                                else:
                                        if 'dependencies' in data:
                                                for d in data['dependencies']:
                                                        if "/" in d:
                                                                res = {}
                                                                product = d.split("/")[1]
                                                                versions = data['dependencies'][d]
                                                                res['product'] = product
                                                                res['versions'] = versions
                                                                res['location'] = file
                                                                packagesResults['javascript']['inventory'].append(res)
                                                                if product not in packagesResults['javascript']['packages']:
                                                                        packagesResults['javascript']['packages'].append(product)
                                                        else:
                                                                res = {}
                                                                product = d
                                                                versions = data['dependencies'][d]
                                                                res['product'] = product
                                                                res['versions'] = versions
                                                                res['location'] = file
                                                                packagesResults['javascript']['inventory'].append(res)
                                                                if product not in packagesResults['javascript']['packages']:
                                                                        packagesResults['javascript']['packages'].append(product)

                                        if 'devDependencies' in data:
                                                for d in data['devDependencies']:
                                                        if "/" in d:
                                                                res = {}
                                                                product = d.split("/")[1]
                                                                versions = data['devDependencies'][d]
                                                                res['product'] = product
                                                                res['versions'] = versions
                                                                res['location'] = file
                                                                packagesResults['javascript']['inventory'].append(res)
                                                                if product not in packagesResults['javascript']['packages']:
                                                                        packagesResults['javascript']['packages'].append(product)
                                                        else:
                                                                res = {}
                                                                product = d
                                                                versions = data['devDependencies'][d]
                                                                res['product'] = product
                                                                res['versions'] = versions
                                                                res['location'] = file
                                                                packagesResults['javascript']['inventory'].append(res)
                                                                if product not in packagesResults['javascript']['packages']:
                                                                        packagesResults['javascript']['packages'].append(product)




                    cmd = "rm -rf %s*" % sourcefolder
                    status, output = commands.getstatusoutput(cmd)
                    cmd = "docker rmi -f %s" % imagename
                    status, output = commands.getstatusoutput(cmd)

                    return packagesResults

class niah_connector():
        def __init__(self):
                pass


        def getClone(self, connType, connName, connRepo, connBranch):
            if not path.exists("/tmp/niah.json"):
                    print("[ INFO ] Autentication Failure, use 'niah auth' cli to login")
                    sys.exit(1)

            with open('/tmp/niah.json') as f:
                    configData = json.load(f)

            if 'connector' not in configData:
                print("[ INFO ] Add connector using `niah connector ...`")
                sys.exit(1)
                

            if connType not in configData['connector']:
                print("[ INFO ] connector not found")
                sys.exit(1)
            else:
                if len(configData['connector'][connType]) > 0:
                    check = False
                    resCheck = []
                    for connv in configData['connector'][connType]:
                        url = connv['url']
                        token = connv['token']
                        name = connv['name']
                        uid = connv['uid']
                        resCheck.append(name)
                        if name == connName:
                                check = True
                                break

                    if not check:
                        print("[ INFO ] Connector %s not found, please select connector from availabel lists - %s" % (connName, ','.join(resCheck)))
                else:
                    print("[ INFO ] Connector %s is empty" % connType)
                                
            connRepos = []

            try:
                if url == "github.com":
                        g = Github(token)
                        for repo in g.get_user().get_repos():
                                connRepos.append(repo.name)
                else:
                        g = Github(base_url="https://%s/api/v3" % url, login_or_token=token)
                        for repo in g.get_user().get_repos():
                                connRepos.append(repo.name)
            except:
                print("[ INFO ] github connection error, please check token...")
                sys.exit(1)

            if connRepo != "all" or not connRepo:
                if connRepo not in connRepos:
                        print("[ INFO ] repository %s is not found" % connRepo)
                        sys.exit(1)
                else:
                        connRepos = []
                        connRepos.append(connRepo)

            resLists = []
                
            if len(connRepos) > 0:
                for connRepo in connRepos:
                        status, output = getstatusoutput("rm -rf /tmp/%s" % connRepo)
                        if connBranch:
                                cmd = "git clone --branch %s https://%s:%s@%s/%s/%s.git /tmp/%s" % (connBranch, uid, token, url, uid, connRepo, connRepo)
                        else:
                                cmd = "git clone https://%s:%s@%s/%s/%s.git /tmp/%s" % (uid, token, url, uid, connRepo, connRepo)

                        status, output = getstatusoutput(cmd)
                        res = {}
                        res['repository'] = connRepo
                        res['repoType'] = connType
                        res['branch'] = connBranch
                        res['connector'] = connName
                        res['gitId'] = uid
                        resLists.append(res)
            else:
                print("[ INFO ] Repository not found")

            return resLists
                

class niah_viewreport():
        def __init__(self, reports, upload, auth=''):
            headers = {
                        'Content-Type': 'application/json',
            }

            if not auth:
                if not path.exists("/tmp/niah.json"):
                    print("[ INFO ] Autentication Failure, use 'niah auth' cli to login")
                    sys.exit(1)

                with open('/tmp/niah.json') as f:
                    configData = json.load(f)

                data = '{"username": "%s", "password": "%s"}' % (configData['username'], configData['password'])
           
                try:
                        response = requests.post('http://%s/api/auth' % SERVER_IP, headers=headers, data=data)
                        if response.status_code == 200:
                                res = response.text
                                access_token = json.loads(res)['access_token']
                                self.access_token = access_token
                                configData['access_token'] = access_token

                                with open('/tmp/niah.json', 'w') as f:
                                        json.dump(configData, f)
                        else:
                                print("[ INFO ] Invalid or Expire Credential/Token")
                                sys.exit(1)
                except:
                        print("[ INFO ] niah.io server connection error! check internet connectivity")
                        sys.exit(1)
            
            else:
                username = auth['username']
                password = auth['password']
                data = '{"username": "%s", "password": "%s"}' % (username, password)

                try:
                        response = requests.post('http://%s/api/auth' % SERVER_IP, headers=headers, data=data)
                        if response.status_code == 200:
                                res = response.text
                                access_token = json.loads(res)['access_token']
                                self.access_token = access_token
                        else:
                                print("[ INFO ] Invalid or Expire Credential/Token")
                                sys.exit(1)
                except:
                        print("[ INFO ] niah.io server connection error! check internet connectivity")
                        sys.exit(1)


            self.headers = {
                'Content-Type': 'application/json',
                'Authorization': 'JWT %s' % access_token,
            }

            self.headersu = {
                'Authorization': 'JWT %s' % access_token,
            }

            response = requests.get('http://%s/api/getuserid' % SERVER_IP, headers=self.headers)
            res = response.text
            if response.status_code == 401:
                print("[ INFO ] Invalid or Expire Credential/Token")
                sys.exit(1)

            self.user_id = json.loads(res)['user_id']
            self.company_id = json.loads(res)['company_id']
            self.team_id = json.loads(res)['team_id']

            if len(reports) > 0:
                for report in reports:
                        print("######################## %s ########################" % report)
                        self.genConsoleReport('%s' % (report))

                        if upload.lower() == 'yes':
                                self.reportUpload(report)

        def reportUpload(self, filename):
                with open(filename) as f:
                        data = json.load(f)

                project = data['header']['Project']
                scanner_type = data['header']['scanner_type']
                date = data['header']['Date']
                docker = data['header']['docker']
                label = data['header']['tags']
                repoType = data['header']['repoType']
                scan_source = data['header']['scan_source']

                resHeader = {}
                resHeader['scanner_type'] = scanner_type
                resHeader['projectname'] = project
                resHeader['label'] = label
                resHeader['repoType'] = repoType
                resHeader['docker' ] = docker
                resHeader['project_date'] = date
                resHeader['scan_source'] = scan_source
                resHeader['details'] = {}
                if scanner_type == "dependancies":
                        if 'target' in data['header']:
                                target = data['header']['target']
                                resHeader['details']['target'] = target
                        if 'scan_project' in data['header']:
                                scan_project = data['header']['scan_project']
                                resHeader['details']['scan_project'] = scan_project
                        if 'repository' in data['header']:
                                repository = data['header']['repository']
                                resHeader['details']['repository'] = repository
                        if 'branch' in data['header']:
                                branch = data['header']['branch']
                                resHeader['details']['branch'] = branch
                        if 'gitId' in data['header']:
                                repoId = data['header']['gitId']
                                resHeader['details']['repoId'] = repoId
                        if 'installer_type' in data['header']:
                                installer_type = data['header']['installer_type']
                                resHeader['details']['installer_type'] = installer_type
                        if 'homeurl' in data['header']:
                                homeurl = data['header']['homeurl']
                                resHeader['details']['homeurl'] = homeurl
                        if 'projecturl' in data['header']:
                                projecturl = data['header']['projecturl']
                                resHeader['details']['projecturl'] = projecturl
                        if 'project' in data['header']:
                                project = data['header']['project']
                                resHeader['details']['project'] = project
                        if 'language' in data['header']:
                                language = data['header']['language']
                                resHeader['details']['language'] = language

                if scanner_type == "application":
                        if 'cms' in data['header']:
                                cms = data['header']['cms']
                                resHeader['details']['cms'] = cms
                        if 'domainname' in data['header']:
                                domainname = data['header']['domainname']
                                resHeader['details']['domainname'] = domainname
                        if 'System Name' in data['header']:
                                system_name = data['header']['System Name']
                                resHeader['details']['system_name'] = system_name
                        if 'System IP' in data['header']:
                                system_ip = data['header']['System IP']  
                                resHeader['details']['system_ip'] = system_ip
                        if 'OS Name' in data['header']:
                                system_os = data['header']['OS Name']
                                resHeader['details']['system_os'] = system_os

                if scanner_type == "system":
                        if 'OS Name' in data['header']:
                                system_os = data['header']['OS Name']
                                resHeader['details']['system_os'] = system_os
                        if 'System IP' in data['header']:
                                system_ip = data['header']['System IP']
                                resHeader['details']['system_ip'] = system_ip
                        if 'System Name' in data['header']:
                                system_name = data['header']['System Name']
                                resHeader['details']['system_name'] = system_name
                        if 'OS Version' in data['header']:
                                os_version = data['header']['OS Version']
                                resHeader['details']['os_version'] = os_version

                fname = os.path.basename(filename)
                print(resHeader)
                files = [
                        ('file', (fname, open(filename, 'rb'), 'application/octet')),
                        ('data', ('data', json.dumps(resHeader), 'application/json')),
                ]
                url = 'http://%s/api/report-upload' % SERVER_IP
                response = requests.post(url, headers=self.headersu, files=files)
                
                if response.status_code == 201:
                    print("[ INFO ] Report %s uloaded on server" % filename)
                elif response.status_code == 400:
                    print("[ INFO ] User does not exists")
                elif response.status_code == 401:
                    print("[ INFO ] Report %s already exist on server" % filename)
                else:
                    print("[ ERROR ] Report %s Upload Error" % filename)


        def genConsoleReport(self, reportfile):
                end="\033[0m"
                black="\033[0;30m"
                blackb="\033[1;30m"
                white="\033[0;37m"
                whiteb="\033[1;37m"
                red="\033[0;31m"
                redb="\033[1;31m"
                green="\033[0;32m"
                greenb="\033[1;32m"
                yellow="\033[0;33m"
                yellowb="\033[1;33m"
                blue="\033[0;34m"
                blueb="\033[1;34m"
                purple="\033[0;35m"
                purpleb="\033[1;35m"
                lightblue="\033[0;36m"
                lightblueb="\033[1;36m"


                print((colored(figlet_format("NIAH"), color="blue")))

                with open(reportfile) as jsonfile:
                        jsonData = json.load(jsonfile)


                print('*************%sNiah Security%s*************' % (blue, end))
                print("\n")

                x = PrettyTable(border=False, header=False, padding_width=1)
                x.field_names = ["name", "value"]
                x.align["name"] = "l"
                x.align["value"] = "l"
                x.add_row(["Report Type:", jsonData['header']['scanner_type']])
                x.add_row(["Project name:", jsonData['header']['Project']])
                x.add_row(["Date:", jsonData['header']['Date'].replace("_", " ")])

                if 'Platform Name' in jsonData['header']:
                        x.add_row(["Platform Name:", jsonData['header']['Platform Name']])

                if 'Type' in jsonData['header']:
                        x.add_row(["OS Name:", jsonData['header']['Type']])

                x.add_row(["Tags:", jsonData['header']['tags']])

                if 'Total Scanned Packages' in jsonData['header']:
                        x.add_row(["Total Scanned Packages:", jsonData['header']['Total Scanned Packages']])
                if 'Total Unique Vulnerabilities' in jsonData['header']:
                        x.add_row(["Total Unique Vulnerabilities:", jsonData['header']['Total Unique Vulnerabilities']])
                if 'Total Vulnerable Packages' in jsonData['header']:
                        x.add_row(["Total Vulnerable Packages:", jsonData['header']['Total Vulnerable Packages']])
                if 'Scanned Applications' in jsonData['header']:
                        x.add_row(["Scanned Applications:", jsonData['header']['Scanned Applications']])
                if 'language' in jsonData['header']:
                        x.add_row(["Language:", jsonData['header']['language']])
                if 'target' in jsonData['header']:
                        x.add_row(["Scan Project:", jsonData['header']['target']])
                if 'Total Scanned Dependancies' in jsonData['header']:
                        x.add_row(["Total Scanned Dependancies:", jsonData['header']['Total Scanned Dependancies']])
                if 'Total Vulnerable Dependencies' in jsonData['header']:
                        x.add_row(["Total Vulnerable Dependencies:", jsonData['header']['Total Vulnerable Dependencies']])
                if 'Tested With' in jsonData['header']:
                        x.add_row(["Tested With:", jsonData['header']['Tested With']])

                x.add_row(["Report:", "%s.json" % jsonData['header']['Date']])

                print(x)
                print("\n")


                x = PrettyTable()
                x.field_names = ["High", "Medium", "Low"]

                print('*************%sSeverity%s*************' % (blue, end))
                print("\n")

                if 'HIGH' not in jsonData['header']['Severity']:
                        high = 0
                else:
                        high = "%s%s%s" % (red, jsonData['header']['Severity']['HIGH'], end)

                if 'MEDIUM' not in jsonData['header']['Severity']:
                        med = 0
                else:
                        med = "%s%s%s" % (yellow, jsonData['header']['Severity']['MEDIUM'], end)

                if 'LOW' not in jsonData['header']['Severity']:
                        low = 0
                else:
                        low = "%s%s%s" % (green, jsonData['header']['Severity']['LOW'], end)


                x.add_row([high, med, low])
                print(x)
                print("\n")

                print('*************%sIssues%s*************' % (blue, end))

                print("\n")

                count = 1
                
                for data in jsonData['Issues']['data']:
                        if data['Severity'] == "HIGH":
                                severityData = "\033[1;31m%s\033[0m" % data['Severity']
                        elif data['Severity'] == "CRITICAL":
                                severityData = "\033[1;31m%s\033[0m" % data['Severity']
                        elif data['Severity'] == "MEDIUM":
                                severityData = "\033[1;33m%s\033[0m" % data['Severity']
                        elif data['Severity'] == "LOW":
                                severityData = "\033[1;32m%s\033[0m" % data['Severity']
                        else:
                                severityData = "\033[1;32m%s\033[0m" % data['Severity']

                        if data['CVEID'] == "None" or not data['CVEID']:
                                if jsonData['header']['scanner_type'] == "system":
                                    rowData = "(\033[1;36m%s\033[0m) %s - %s : %s\n(%s) (%s) (%s) (Product : %s) (Patch : %s%s%s) (Score : %s)\n" % (count, data['usn_id'], data['Vulnerability Name'], severityData, data['Publish Date'], data['CWE'], data['VectorString'], data['Product'], green, data['Patched Version'], end, data['BaseScore'])
                                    print(rowData)
                                if jsonData['header']['scanner_type'] == "dependancies":
                                    rowData = "(\033[1;36m%s\033[0m) %s - %s\n(%s) (%s) (%s) (Product : %s) (Vendor : %s) (Patch : %s%s%s)\n" % (count, data['Vulnerability Name'], severityData, data['Publish Date'], data['CWE'], data['VectorString'], data['Product'], data['Vendor'], green, data['Patched Version'], end)
                                    print(rowData)
                                if jsonData['header']['scanner_type'] == "application":
                                    rowData = "(\033[1;36m%s\033[0m) %s - %s\n(%s) (%s) (%s) (Product : %s) (Patch : %s%s%s)\n" % (count, data['Vulnerability Name'], severityData, data['Publish Date'], data['CWE'], data['VectorString'], data['Product'], green, data['Patched Version'], end)
                                    print(rowData)
                        else:
                                if jsonData['header']['scanner_type'] == "system":
                                    rowData = "(\033[1;36m%s\033[0m) %s - %s : %s\n(%s) (%s) (%s) (Product : %s) (Patch : %s%s%s) (Score : %s)\n" % (count, data['usn_id'], data['CVEID'], severityData, data['Publish Date'], data['CWE'], data['VectorString'], data['Product'], green, data['Patched Version'], end, data['BaseScore'])
                                    print(rowData)
                                if jsonData['header']['scanner_type'] == "dependancies":
                                    rowData = "(\033[1;36m%s\033[0m) %s - %s\n(%s) (%s) (%s) (Product : %s) (Vendor : %s) (Patch : %s%s%s)\n" % (count, data['CVEID'], severityData, data['Publish Date'], data['CWE'], data['VectorString'], data['Product'], data['Vendor'], green, data['Patched Version'], end)
                                    print(rowData)
                                if jsonData['header']['scanner_type'] == "application":
                                    rowData = "(\033[1;36m%s\033[0m) %s - %s\n(%s) (%s) (%s) (Product : %s) (Patch : %s%s%s)\n" % (count, data['CVEID'], severityData, data['Publish Date'], data['CWE'], data['VectorString'], data['Product'], green, data['Patched Version'], end)
                                    print(rowData)

                        count = count + 1

                print("\n")
                print('%sDetail report you can find on Niah portal.%s' % (blue, end))
                print("\n")
                print('{:*^20}'.format('To upload report you have to run command with "niah watch -f <reportfile.json>" or "niah watch".'))


class applicationVulnerabilities():
        def __init__(self, reportPath, project, tag, upload):
            if not path.exists("/tmp/niah.json"):
                    print("[ INFO ] Autentication Failure, use 'niah auth' cli to login")
                    sys.exit(1)

            with open('/tmp/niah.json') as f:
                    configData = json.load(f)

            headers = {
                'Content-Type': 'application/json',
            }

            data = '{"username": "%s", "password": "%s"}' % (configData['username'], configData['password'])

            try:
                response = requests.post('http://%s/api/auth' % SERVER_IP, headers=headers, data=data)
                if response.status_code == 200:
                        res = response.text
                        access_token = json.loads(res)['access_token']
                        self.access_token = access_token
                        configData['access_token'] = access_token

                        with open('/tmp/niah.json', 'w') as f:
                                json.dump(configData, f)
                else:
                        print("[ INFO ] Invalid or Expire Credential/Token")
                        sys.exit(1)
            except:
                    print("[ INFO ] niah.io server connection error! check internet connectivity")
                    sys.exit(1)
 
            with open('/tmp/niah.json') as f:
                    configData = json.load(f)

            access_token = configData['access_token']
            self.access_token = configData['access_token']

            self.headers = {
                'Content-Type': 'application/json',
                'Authorization': 'JWT %s' % access_token,
            }

            self.headersu = {
                'Authorization': 'JWT %s' % access_token,
            }

            response = requests.get('http://%s/api/getuserid' % SERVER_IP, headers=self.headers)
            res = response.text
            if response.status_code == 401:
                print("[ INFO ] Invalid or Expire Credential token")
                sys.exit(1)

            self.user_id = json.loads(res)['user_id']
            self.company_id = json.loads(res)['company_id']
            self.team_id = json.loads(res)['team_id']

            self.report_upload = upload
            self.reportPath = reportPath

            if not project:
                    project = socket.gethostname()

            self.project = project
            self.projectTag = tag


            self.results = {}
            self.resultsDepends = {}
            self.results['header'] = {}
            now = datetime.now()
            self.report_name = now.strftime("%d-%m-%Y_%H:%M:%S")
            self.report_path = reportPath
            self.system_name = socket.gethostname()    

            self.results['header']['Date'] = self.report_name
            self.results['header']['Project'] = self.project
            self.results['header']['owner'] = self.user_id
            self.results['header']['company_id'] = self.company_id
            self.results['header']['team_id'] = self.team_id
            self.results['header']['docker'] = "True"
            self.results['header']['tags'] = self.projectTag
            self.results['header']['scanner_type'] = 'application'
            self.results['header']['repoType'] = "local"
            self.results['header']['scan_source'] = "application"

            self.results['header']['System Name'] = self.system_name
            self.results['header']['System IP'] = self.getsystemip()
            self.results['header']['OS Name']   = platform.platform()
            
            self.severity = {}
            self.vuln_found = []
            self.scanApplications = []
            self.vuln_product = []

        def getsystemip(self):
                s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
                s.connect(("8.8.8.8", 80))
                system_ip = s.getsockname()[0]
                s.close()
                return system_ip

        def gtEq(self, vers1, mVers):
                if parse_version(mVers) >= parse_version(vers1):
                        return True
                else:
                        return False

        def gt(self, vers1, mVers):
                if parse_version(mVers) > parse_version(vers1):
                        return True
                else:
                        return False

        def ltEq(self, vers1, mVers):
                if parse_version(mVers) <= parse_version(vers1):
                        return True
                else:
                        return False


        def lt(self, vers1, mVers):
                if parse_version(mVers) < parse_version(vers1):
                        return True
                else:
                        return False

        def eq(self, vers1, mVers):
                if parse_version(mVers) == parse_version(vers1):
                        return True
                else:
                        return False


        def matchVer(self, cve_id, product, baseScore, accessVector, vectorString, pub_date, cwe_text, vendor, vuln_name, versions, patch, severity, mVers, reference, exploits):
                mVer = mVers

                severity = severity.upper()

                for vers in versions.split(","):
                    if re.findall(r'\[.*:.*\]', str(vers)):
                        vers1 = re.findall(r'\[(.*):', str(vers))[0]
                        vers2 = re.findall(r':(.*)\]', str(vers))[0]

                        if self.gtEq(vers1, mVer) and self.ltEq(vers2, mVer):
                                res = {}
                                
                                res['CVEID'] = str(cve_id)
                                res['Product'] = str(product)
                                res['Vulnerability Name'] = str(vuln_name)
                                res['Versions'] = str(versions)
                                res['BaseScore'] = str(baseScore)
                                res['AccessVector'] = str(accessVector)
                                res['VectorString'] = str(vectorString)
                                res['Publish Date'] = str(pub_date)
                                res['CWE'] = str(cwe_text)
                                res['Severity'] = str(severity)
                                res['Patched Version'] = str(patch)
                                res['Installed Version'] = str(mVers)
                                res['Reference'] = str(reference)
                                if len(exploits) > 0:
                                    res['exploits'] = ','.join(exploits)
                                else:
                                    res['exploits'] = ''
                                if severity not in self.severity:
                                        self.severity[severity] = []
                                
                                if res not in self.severity[severity]:
                                        self.severity[severity].append(res)

                                if res not in self.results['Issues']['data']:
                                        self.vuln_found.append(product)
                                        self.results['Issues']['data'].append(res)

                                        if product not in self.vuln_product:
                                                self.vuln_product.append(product)


                    elif re.findall(r'\(.*:.*\]', str(vers)):
                        vers1 = re.findall(r'\((.*):', str(vers))[0]
                        vers2 = re.findall(r':(.*)\]', str(vers))[0]

                        if self.gt(vers1, mVer) and self.ltEq(vers2, mVer):
                                res = {}
                               
                                res['CVEID'] = str(cve_id)
                                res['Product'] = str(product)
                                res['Vulnerability Name'] = str(vuln_name)
                                res['Versions'] = str(versions)
                                res['BaseScore'] = str(baseScore)
                                res['AccessVector'] = str(accessVector)
                                res['VectorString'] = str(vectorString)
                                res['Publish Date'] = str(pub_date)
                                res['CWE'] = str(cwe_text)
                                res['Severity'] = str(severity)
                                res['Patched Version'] = str(patch)
                                res['Installed Version'] = str(mVers)
                                res['Reference'] = str(reference)
                                if len(exploits) > 0:
                                    res['exploits'] = ','.join(exploits)
                                else:
                                    res['exploits'] = ''

                                if severity not in self.severity:
                                        self.severity[severity] = []
                                
                                if res not in self.severity[severity]:
                                        self.severity[severity].append(res)                                


                                if res not in self.results['Issues']['data']:
                                        self.vuln_found.append(product)
                                        self.results['Issues']['data'].append(res)

                                        if product not in self.vuln_product:
                                                self.vuln_product.append(product)


                    elif re.findall(r'\[.*:.*\)', str(vers)):
                        vers1 = re.findall(r'\[(.*):', str(vers))[0]
                        vers2 = re.findall(r':(.*)\)', str(vers))[0]

                        if self.gtEq(vers1, mVer) and self.lt(vers2, mVer):
                                res = {}
                               
                                res['CVEID'] = str(cve_id)
                                res['Product'] = str(product)
                                res['Vulnerability Name'] = str(vuln_name)
                                res['Versions'] = str(versions)
                                res['BaseScore'] = str(baseScore)
                                res['AccessVector'] = str(accessVector)
                                res['VectorString'] = str(vectorString)
                                res['Publish Date'] = str(pub_date)
                                res['CWE'] = str(cwe_text)
                                res['Severity'] = str(severity)
                                res['Patched Version'] = str(patch)
                                res['Installed Version'] = str(mVers)
                                res['Reference'] = str(reference)
                                if len(exploits) > 0:
                                    res['exploits'] = ','.join(exploits)
                                else:
                                    res['exploits'] = ''

                                if severity not in self.severity:
                                        self.severity[severity] = []
                                
                                if res not in self.severity[severity]:
                                        self.severity[severity].append(res)

                                if res not in self.results['Issues']['data']:
                                        self.vuln_found.append(product)
                                        self.results['Issues']['data'].append(res)

                                        if product not in self.vuln_product:
                                                self.vuln_product.append(product)


                    elif re.findall(r'\(.*:.*\)', str(vers)):
                        vers1 = re.findall(r'\((.*):', str(vers))[0]
                        vers2 = re.findall(r':(.*)\)', str(vers))[0]

                        if self.gt(vers1, mVer) and self.lt(vers2, mVer):
                                res = {}
                               
                                res['CVEID'] = str(cve_id)
                                res['Product'] = str(product)
                                res['Vulnerability Name'] = str(vuln_name)
                                res['Versions'] = str(versions)
                                res['BaseScore'] = str(baseScore)
                                res['AccessVector'] = str(accessVector)
                                res['VectorString'] = str(vectorString)
                                res['Publish Date'] = str(pub_date)
                                res['CWE'] = str(cwe_text)
                                res['Severity'] = str(severity)
                                res['Patched Version'] = str(patch)
                                res['Installed Version'] = str(mVers)
                                res['Reference'] = str(reference)
                                if len(exploits) > 0:
                                    res['exploits'] = ','.join(exploits)
                                else:
                                    res['exploits'] = ''

                                if severity not in self.severity:
                                        self.severity[severity] = []
                                
                                if res not in self.severity[severity]:
                                        self.severity[severity].append(res)

                                if res not in self.results['Issues']['data']:
                                        self.vuln_found.append(product)
                                        self.results['Issues']['data'].append(res)

                                        if product not in self.vuln_product:
                                                self.vuln_product.append(product)

                    elif re.findall(r'\(.*:.*\)', str(vers)):
                        vers1 = re.findall(r'\((.*):', str(vers))[0]
                        vers2 = re.findall(r':(.*)\)', str(vers))[0]

                        if self.gt(vers1, mVer) and self.lt(vers2, mVer):
                                res = {}
                                
                                res['CVEID'] = str(cve_id)
                                res['Product'] = str(product)
                                res['Vulnerability Name'] = str(vuln_name)
                                res['Versions'] = str(versions)
                                res['BaseScore'] = str(baseScore)
                                res['AccessVector'] = str(accessVector)
                                res['VectorString'] = str(vectorString)
                                res['Publish Date'] = str(pub_date)
                                res['CWE'] = str(cwe_text)
                                res['Severity'] = str(severity)
                                res['Patched Version'] = str(patch)
                                res['Installed Version'] = str(mVers)
                                res['Reference'] = str(reference)
                                if len(exploits) > 0:
                                    res['exploits'] = ','.join(exploits)
                                else:
                                    res['exploits'] = ''

                                if severity not in self.severity:
                                        self.severity[severity] = []
                                
                                if res not in self.severity[severity]:
                                        self.severity[severity].append(res)

                                if res not in self.results['Issues']['data']:
                                        self.vuln_found.append(product)
                                        self.results['Issues']['data'].append(res)

                                        if product not in self.vuln_product:
                                                self.vuln_product.append(product)

                    else:
                        vers1 = str(vers)
                        if self.eq(vers1, mVer):
                                res = {}

                                res['CVEID'] = str(cve_id)
                                res['Product'] = str(product)
                                res['Vulnerability Name'] = str(vuln_name)
                                res['Versions'] = str(versions)
                                res['BaseScore'] = str(baseScore)
                                res['AccessVector'] = str(accessVector)
                                res['VectorString'] = str(vectorString)
                                res['Publish Date'] = str(pub_date)
                                res['CWE'] = str(cwe_text)
                                res['Severity'] = str(severity)
                                res['Patched Version'] = str(patch)
                                res['Installed Version'] = str(mVers)
                                res['Reference'] = str(reference)
                                if len(exploits) > 0:
                                    res['exploits'] = ','.join(exploits)
                                else:
                                    res['exploits'] = ''

                                if severity not in self.severity:
                                        self.severity[severity] = []
                                
                                if res not in self.severity[severity]:
                                        self.severity[severity].append(res)

                                if res not in self.results['Issues']['data']:
                                        self.vuln_found.append(product)
                                        self.results['Issues']['data'].append(res)

                                        if product not in self.vuln_product:
                                                self.vuln_product.append(product)

        def getVulnData(self, productName, mVers):
                if productName in self.responseData:
                    for res in self.responseData[productName]:
                        cve_id = res['cve_id']
                        product = res['product']
                        baseScore = res['baseScore']
                        accessVector = res['attackVector']
                        vectorString = res['vectorString']
                        pub_date = res['publish_date']
                        cwe_text = res['cwe_text']
                        vendor = res['vendor']
                        vuln_name = res['vuln_name']
                        versions = res['versions']
                        patch = res['patch']
                        severity = res['severity']
                        reference = res['reference']
                        exploits = res['exploits']

                        self.matchVer(cve_id, product, baseScore, accessVector, vectorString, pub_date, cwe_text, vendor, vuln_name, versions, patch, severity, mVers, reference, exploits)

        def getConfig(self):
                try:
                        url = "http://%s/api/getConfig" % SERVER_IP
                        headers = {
                                'Authorization': 'Basic QWRtaW5pc3RyYXRvcjpWZXJzYUAxMjM=',
                                'Content-Type': 'application/json'
                        }

                        response = requests.request("GET", url, headers=headers)
                        responseData = response.json()
                        return responseData
                except:
                        print("[ OK ] Database sync error! Check internet connectivity")
                        sys.exit(1)


        def getInstallPkgList(self):
                self.results['inventory'] = []
                resultsPackage = []
                resJson = self.getConfig()
                
                for app in resJson["packageRegex"]:         
                        for app1 in resJson["packageRegex"][app]:       
                                location = app1["location"]
                                file_regex = app1["file_regex"]
                                content_version_regex = app1["content_version_regex"]
                                content_product_regex = app1["content_product_regex"]

                                #location = location.encode('utf-8')
                                #file_regex = file_regex.encode('utf-8')
                                for filename in glob2.glob('%s/**/%s' % (location, file_regex), recursive=True):
                                        res = {}
                                        product = ''
                                        version = ''
                                        fData = open(filename, "r").read()
                                        if re.findall(r'%s' % content_version_regex, str(fData)):
                                                version = re.findall(r'%s' % content_version_regex, str(fData))[0]
                                        if re.findall(r'%s' % content_product_regex, str(fData)):
                                                product = re.findall(r'%s' % content_product_regex, str(fData))[0]

                                        if product and version:
                                                res['product'] = product.lower()
                                                res['version'] = version
                                                res['filename'] = filename
                                                self.results['inventory'].append(res)
                                                if product not in resultsPackage:
                                                        resultsPackage.append(product)

                return resultsPackage

        def maxValue(self, mVersions):
                ver1 = '0.0'
                for ver in mVersions:
                        if parse_version(ver) > parse_version(ver1):
                                ver1 = ver

                return ver1


        def getUnique(self, lists):
                unique_list = []
                for x in lists:
                        if x not in unique_list:
                                unique_list.append(x)
                return unique_list

        def scanPackage(self):
                print("[ OK ] Preparing..., It's take some time to completed.")
                packageLists = self.getInstallPkgList()
                self.syncData(packageLists)

                self.results['Issues'] = {}
                self.results['Issues']['data'] = []

                print("[ OK ] Scanning started")
                print("[ OK ] There are total %s applications are processing" % len(packageLists))
                for app in tqdm(self.results['inventory']):
                        product = app['product']
                        versions = app['version']
                        if product not in self.scanApplications:
                                self.scanApplications.append(product)

                        self.getVulnData(product, versions)

                print("[ OK ] Scannnig completed")

                self.results['header']['Severity'] = {}
                self.results['header']['Total Unique Vulnerabilities'] = len(self.vuln_found)
                self.results['header']['Total Vulnerable Applications'] = len(self.getUnique(self.vuln_product))
                self.results['header']['Total Scanned Applications'] = len(self.scanApplications)
                self.results['header']['Scanned Applications'] = ','.join(self.scanApplications)

                for severity in self.severity:
                        self.results['header']['Severity'][severity] = len(self.severity[severity])

                with open("%s/%s.json" % (self.report_path, self.report_name), "w") as f:
                        json.dump(self.results, f)

                print("[ OK ] Vulnerabilities Report ready - %s/%s.json" % (self.report_path, self.report_name))

                reportLists = []
                reportLists.append("%s/%s.json" % (self.report_path, self.report_name))

                if self.report_upload.lower() == 'yes':
                        resReport = niah_viewreport(reportLists, 'yes')
                else:
                        resReport = niah_viewreport(reportLists, 'no')


        def syncData(self, productLists):
                try:
                        url = "http://%s/api/vulnapp" % SERVER_IP
                        payload = "{\"data\": \""+ ','.join(productLists) + "\"}"

                        response = requests.request("POST", url, headers=self.headers, data = payload)
                        responseData = response.json()
                        self.responseData = responseData
                except:
                        print("[ ERROR ] Database sync error! Check internet connectivity")
                        sys.exit(1)
        


class niah_platformscan():
        def __init__(self, reportPath, project, tag, upload):
            if not path.exists("/tmp/niah.json"):
                    print("[ INFO ] Autentication Failure, use 'niah auth' cli to login")
                    sys.exit(1)

            with open('/tmp/niah.json') as f:
                    configData = json.load(f)

            headers = {
                'Content-Type': 'application/json',
            }

            data = '{"username": "%s", "password": "%s"}' % (configData['username'], configData['password'])

            try:
                response = requests.post('http://%s/api/auth' % SERVER_IP, headers=headers, data=data)
                if response.status_code == 200:
                        res = response.text
                        access_token = json.loads(res)['access_token']
                        self.access_token = access_token
                        configData['access_token'] = access_token

                        with open('/tmp/niah.json', 'w') as f:
                                json.dump(configData, f)
                else:
                        print("[ INFO ] Invalid or Expire Credential/Token")
                        sys.exit(1)
            except:
                    print("[ INFO ] niah.io server connection error! check internet connectivity")
                    sys.exit(1)

            with open('/tmp/niah.json') as f:
                    configData = json.load(f)

            access_token = configData['access_token']
            self.access_token = configData['access_token']

            self.headers = {
                'Content-Type': 'application/json',
                'Authorization': 'JWT %s' % access_token,
            }

            self.headersu = {
                'Authorization': 'JWT %s' % access_token,
            }

            response = requests.get('http://%s/api/getuserid' % SERVER_IP, headers=self.headers)
            res = response.text
            if response.status_code == 401:
                print("[ INFO ] Invalid or Expire Credential token")
                sys.exit(1)

            self.user_id = json.loads(res)['user_id']
            self.company_id = json.loads(res)['company_id']
            self.team_id = json.loads(res)['team_id']

            self.report_upload = upload
            self.reportPath = reportPath

            if not project:
                project = socket.gethostname()

            self.system_name = socket.gethostname()
            self.project = project
            self.projectTag = tag


            self.results = {}
            self.resultsDepends = {}
            self.results['header'] = {}
            now = datetime.now()
            self.report_name = now.strftime("%d-%m-%Y_%H:%M:%S")
            self.report_path = reportPath

            self.results['header']['Date'] = self.report_name
            self.results['header']['Project'] = self.project
            self.results['header']['owner'] = self.user_id
            self.results['header']['company_id'] = self.company_id
            self.results['header']['team_id'] = self.team_id
            self.results['header']['docker'] = "False"
            self.results['header']['tags'] = self.projectTag
            self.results['header']['scanner_type'] = 'system'
            self.results['header']['repoType'] = "local"

            self.results['header']['System Name'] = self.system_name
            self.results['header']['System IP'] = self.getsystemip()

            self.vuln_depe = []
            self.severity = {}
            self.vuln_found = []
            self.testedWith = []
            self.packageCount = []
            self.vuln_product = []

        def getsystemip(self):
                s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
                s.connect(("8.8.8.8", 80))
                system_ip = s.getsockname()[0]
                s.close()
                return system_ip

        def lt(self, vulnVer, installedVer):
                status, output = getstatusoutput('if $(dpkg --compare-versions "%s" "eq" "%s"); then echo true; fi' % (vulnVer, installedVer))
                #print('if $(dpkg --compare-versions "%s" "eq" "%s"); then echo true; fi' % (vulnVer, installedVer))
                if output == "true":
                        return False

                status, output = getstatusoutput('if $(dpkg --compare-versions "%s" "lt" "%s"); then echo true; fi' % (vulnVer, installedVer))
                #print('if $(dpkg --compare-versions "%s" "lt" "%s"); then echo true; fi' % (vulnVer, installedVer))
                if output == "true":
                        return False

                return True

        def checkVer(self, newVer, oldVer):
                if self.lt(oldVer, newVer):
                        return False
                else:
                        return True
                

        def matchVer(self, cve_id, product, versions, vectorString, baseScore, pub_date, cwe, name, usn_id, reference, mVersions, severity, os_name):
                if not severity:
                        severity = "Medium"

                severity = severity.upper()
                if self.lt(versions, mVersions):
                        if os_name == "debian":
                                if product not in self.results['remediation']:
                                        self.results['remediation'][product] = {}
                                        self.results['remediation'][product]['Product'] = product
                                        self.results['remediation'][product]['CVEs'] = []
                                        self.results['remediation'][product]['DSA-ID'] = []
                                        self.results['remediation'][product]['Patched Version'] = ''
                                        self.results['remediation'][product]['Installed Version'] = mVersions

                        if os_name == "ubuntu":
                                if product not in self.results['remediation']:
                                        self.results['remediation'][product] = {}
                                        self.results['remediation'][product]['Product'] = product
                                        self.results['remediation'][product]['CVEs'] = []
                                        self.results['remediation'][product]['USN-ID'] = []
                                        self.results['remediation'][product]['Patched Version'] = ''

                                        if re.findall(r'[\w+-]+(-\d+.\d+.\d+-\d+)[\w+-]+', str(product)):
                                                mVersion = "%s_%s" % (product, mVersions)
                                                self.results['remediation'][product]['Installed Version'] = mVersion
                                        else:
                                                self.results['remediation'][product]['Installed Version'] = mVersions


                        res = {}
                        res['CVEID'] = cve_id
                        if cve_id not in self.results['remediation'][product]['CVEs']:
                                self.results['remediation'][product]['CVEs'].append(cve_id)
                        res['Product'] = product
                        res['Versions'] = versions
                        res['VectorString'] = vectorString
                        res['BaseScore'] = baseScore
                        res['Publish Date'] = pub_date
                        res['CWE'] = cwe
                        res['Vulnerability Name'] = name
                        res['Severity'] = severity

                        if severity not in self.severity:
                                self.severity[severity] = []

                        if res not in self.severity[severity]:
                                self.severity[severity].append(res)
                        
                        if os_name == "ubuntu":
                                res['advisoryid'] = usn_id
                                if usn_id not in self.results['remediation'][product]['USN-ID']:
                                        self.results['remediation'][product]['USN-ID'].append(usn_id)

                        if os_name == "debian":
                                res['advisoryid'] = usn_id
                                if usn_id not in self.results['remediation'][product]['DSA-ID']:
                                        self.results['remediation'][product]['DSA-ID'].append(usn_id)

                        res['Reference'] = reference
                        res['Installed Version'] = mVersions
                        res['Patched Version'] = versions

                        if self.results['remediation'][product]['Patched Version']:
                            if self.checkVer(versions, self.results['remediation'][product]['Patched Version']):
                                self.results['remediation'][product]['Patched Version'] = versions
                        else:
                                self.results['remediation'][product]['Patched Version'] = versions


                        if product not in self.vuln_product:
                                self.vuln_product.append(product)

                        if res not in self.results['Issues']['data']:
                                self.results['Issues']['data'].append(res)
                                self.vuln_found.append(cve_id)



        def getVulnData(self, product, mVersion, platform, os_name):
                if ":" in product:
                        product = product.split(":")[0]

                if os_name == "ubuntu":
                    product1 = product
                    if re.findall(r'[\w+-]+(-\d+.\d+.\d+-\d+)[\w+-]+', str(product)):
                        product1 = product
                        output = re.findall(r'([\w+-]+)(-\d+.\d+.\d+-\d+)([\w+-]+)', str(product))
                        product = "%s-x-x-x-x%s" % (output[0][0], output[0][2])
                        mVersion = "%s_%s" % (product1, mVersion)


                platformArray = []
                if re.findall(r'Ubuntu\s+(\d+.\d+.\d+)\s+LTS', str(platform)):
                        platform = "%s LTS" % re.findall(r'(Ubuntu\s+\d+.\d+)', str(platform))[0]
                        platformArray.append(platform)
                        platform = "%s ESM" % re.findall(r'(Ubuntu\s+\d+.\d+)', str(platform))[0]
                        platformArray.append(platform)
                elif re.findall(r'Ubuntu\s+(\d+.\d+.\d+)\s+ESM', str(platform)):
                        platform = "%s ESM" % re.findall(r'(Ubuntu\s+\d+.\d+)', str(platform))[0]
                        platformArray.append(platform)
                else:
                        platform = platform
                        platformArray.append(platform)

                for platform in platformArray:
                    if platform in self.responseData:
                        if product in self.responseData[platform]:
                            if os_name == "ubuntu":
                                for row in self.responseData[platform][product]:
                                        cve_id = row['cve_id']
                                        versions = row['version']
                                        vectorString = row['vectorString']
                                        baseScore = row['baseScore']
                                        pub_date = row['pub_date']
                                        cwe = row['cwe_text']
                                        name = row['name']
                                        usn_id = row['usn_id']
                                        severity = row['severity']
                                        reference = "https://usn.ubuntu.com/%s/" % usn_id
                                        self.matchVer(cve_id, product1, versions, vectorString, baseScore, pub_date, cwe, name, usn_id, reference, mVersion, severity, os_name)

                            if os_name == "debian":
                                for row in self.responseData[platform][product]:
                                        cve_id = row['cve_id']
                                        versions = row['version']
                                        vectorString = row['vectorString']
                                        baseScore = row['baseScore']
                                        pub_date = row['pub_date']
                                        cwe = row['cwe_text']
                                        name = row['name']
                                        dsa_id = row['dsa_id']
                                        severity = row['severity']
                                        reference = "https://www.debian.org/security/%s/%s" % (cve_id.split("-")[1], dsa_id)
                                        self.matchVer(cve_id, product, versions, vectorString, baseScore, pub_date, cwe, name, dsa_id, reference, mVersion, severity, os_name)



        def getInstallPkgList(self, imagename, os_name, delete=False):
                self.results['inventory'] = []

                cmd = 'docker run --rm -i -t %s /bin/sh -c "dpkg -la > t; cat t"' % (imagename)
                if os_name == "debian" or os_name == "ubuntu":
                        cmd = 'docker run --rm -i -t %s /bin/sh -c "dpkg -la > t; cat t"' % (imagename)
                        status, output = getstatusoutput(cmd)
                        data = output
                        if re.findall(r'ii\s+(.*?)\s+(.*?)\s+(.*?)\s+', str(data)):
                                pkgDetails = re.findall(r'ii\s+(.*?)\s+(.*?)\s+(.*?)\s+', str(data))
                                for pkg in pkgDetails:
                                        res = {}
                                        package = pkg[0]
                                        res['package'] = str(package)
                                        version = pkg[1]
                                        res['version'] = str(version)
                                        archPkg = pkg[2]
                                        res['archPkg'] = str(archPkg)
                                        self.results['inventory'].append(res)

                if not delete:
                        cmd = "docker image rm -f %s" % imagename
                        status, output = getstatusoutput(cmd)
                        
                
        def getUnique(self, lists):
                unique_list = [] 
                for x in lists:
                        if x not in unique_list:
                                unique_list.append(x)
                return unique_list


        def scanPlatformPackage(self, imagename, os_name, os_version, os_type, connType=''):
                print("[ OK ] Preparing.., It's take time to completed")
                self.results['header']['Platform Name'] = str(os_name)
                self.results['header']['Version'] = str(os_version)
                self.results['header']['OS Name'] = str(os_type)
                self.results['header']['Imagename'] =  str(imagename)

                if connType != "local":
                        self.getInstallPkgList(imagename, os_name)
                else:
                        self.getInstallPkgList(imagename, os_name, True)

                self.results['Issues'] = {}
                self.results['Issues']['data'] = []
                self.results['remediation'] = {}

                os_name = self.results['header']['Platform Name']
                self.results['header']['scan_source'] = os_name

                if self.results['header']['Platform Name'] == "ubuntu":
                        platform = self.results['header']['OS Name']
                elif self.results['header']['Platform Name'] == "debian":
                        platform = self.results['header']['OS Name']
                else:
                        platform = self.results['header']['Version']

                if len(self.results['inventory']) > 0:
                        print("[ OK ] Database sync started, this process take couple of minutes")
                        self.syncData(os_name)
                        print("[ OK ] Database sync comleted")
                        print("[ OK ] Scanning started")

                        for pkg in tqdm(self.results['inventory']):
                            arch = pkg['archPkg']
                            version = pkg['version']
                            product = pkg['package']

                            if product not in self.packageCount:
                                self.packageCount.append(product) 

                            self.getVulnData(product, version, platform, os_name)

                print("[ OK ] Scanning Completed")

                self.results['header']['Severity'] = {}
                self.results['header']['Total Scanned Packages'] = len(self.packageCount)
                self.results['header']['Total Unique Vulnerabilities'] = len(self.vuln_found)
                self.results['header']['Total Vulnerable Packages'] = len(self.getUnique(self.vuln_product))

                for severity in self.severity:
                        self.results['header']['Severity'][severity] = len(self.severity[severity])
                
                remediation = []
                for rem_product in self.results['remediation']:
                        res = {}
                        if 'Product' in self.results['remediation'][rem_product]:
                                res['Product'] = self.results['remediation'][rem_product]['Product']
                        if 'CVEs' in self.results['remediation'][rem_product]:
                                res['CVEs'] = ','.join(self.results['remediation'][rem_product]['CVEs'])
                        if 'USN-ID' in self.results['remediation'][rem_product]:
                                res['Advisory-ID'] = ','.join(self.results['remediation'][rem_product]['USN-ID'])
                        if 'DSA-ID' in self.results['remediation'][rem_product]:
                                res['Advisory-ID'] = ','.join(self.results['remediation'][rem_product]['DSA-ID'])
                        if 'Patched Version' in self.results['remediation'][rem_product]:
                                res['Patched Version'] = self.results['remediation'][rem_product]['Patched Version']
                        if 'Installed Version' in self.results['remediation'][rem_product]:
                                res['Installed Version'] = self.results['remediation'][rem_product]['Installed Version']

                        remediation.append(res)

                self.results['remediation'] = {}
                self.results['remediation']['data'] = remediation

                with open("%s/%s.json" % (self.report_path, self.report_name), "w") as f:
                        json.dump(self.results, f)
                
                print("[ OK ] Vulnerabilities Report ready - %s/%s.json" % (self.report_path, self.report_name))

                reportLists = []
                reportLists.append("%s/%s.json" % (self.report_path, self.report_name))

                if self.report_upload.lower() == 'yes':
                        resReport = niah_viewreport(reportLists, 'yes')
                else:
                        resReport = niah_viewreport(reportLists, 'no')
                

        def syncData(self, os_name):
                try:
                        url = "http://%s/api/scan/platform/%s" % (SERVER_IP, os_name)
                        headers = {
                                'Authorization': 'Basic QWRtaW5pc3RyYXRvcjpWZXJzYUAxMjM=',
                                'Content-Type': 'application/json'
                        }
                        payload = "{\"data\": \""+ os_name + "\"}"

                        response = requests.request("POST", url, headers=self.headers, data = payload)
                        responseData = response.json()
                        self.responseData = responseData['data']
                except Exception as e:
                        print(e)
                        print("[ ERROR ] Database sync error! Check internet connectivity")
                        sys.exit(1)



class niah_dependancyscan():
        def __init__(self, reportPath, project, target, tag, upload, repoType, resInfo={}):
            if not path.exists("/tmp/niah.json"):
                    print("[ INFO ] Autentication Failure, use 'niah auth' cli to login")
                    sys.exit(1)

            with open('/tmp/niah.json') as f:
                    configData = json.load(f)

            headers = {
                'Content-Type': 'application/json',
            }

            data = '{"username": "%s", "password": "%s"}' % (configData['username'], configData['password'])

            try:
                response = requests.post('http://%s/api/auth' % SERVER_IP, headers=headers, data=data)
                if response.status_code == 200:
                        res = response.text
                        access_token = json.loads(res)['access_token']
                        self.access_token = access_token
                        configData['access_token'] = access_token

                        with open('/tmp/niah.json', 'w') as f:
                                json.dump(configData, f)
                else:
                        print("[ INFO ] Invalid or Expire Credential/Token")
                        sys.exit(1)
            except Exception as e:
                    if "Permission denied" in str(e):
                            print("[ INFO ] Run command with sudo!!")
                            sys.exit(1)
                    else:
                        print(e)
                        print("[ INFO ] niah.io server connection error! check internet connectivity")
                        sys.exit(1)

            with open('/tmp/niah.json') as f:
                    configData = json.load(f)

            access_token = configData['access_token']
            self.access_token = configData['access_token']

            self.headers = {
                'Content-Type': 'application/json',
                'Authorization': 'JWT %s' % access_token,
            }

            self.headersu = {
                'Authorization': 'JWT %s' % access_token,
            }

            response = requests.get('http://%s/api/getuserid' % SERVER_IP, headers=self.headers)
            res = response.text
            if response.status_code == 401:
                print("[ INFO ] Invalid or Expire Credential token")
                sys.exit(1)

            self.user_id = json.loads(res)['user_id']
            self.company_id = json.loads(res)['company_id']
            self.team_id = json.loads(res)['team_id']

            self.report_upload = upload
            self.reportPath = reportPath
            self.sourcefolder = target

            project_path = os.path.dirname(target)
            self.target = os.path.basename(target)
        
            self.resHeader = {}

            if not project:
                project = self.target

            self.project = project
            self.projectTag = tag

            self.results = {}
            self.resultsDepends = {}
            self.results['header'] = {}
            now = datetime.now()
            self.report_name = now.strftime("%d-%m-%Y_%H:%M:%S")
            self.report_path = reportPath

            self.results['header']['Date'] = self.report_name
            self.results['header']['Project'] = self.project
            self.results['header']['owner'] = self.user_id
            self.results['header']['company_id'] = self.company_id
            self.results['header']['team_id'] = self.team_id
            self.results['header']['repoType'] = repoType
            self.results['header']['docker'] = "True"
            self.results['header']['tags'] = self.projectTag
            self.results['header']['scanner_type'] = 'dependancies'

            self.results['header']['target'] = self.target

            if len(resInfo) > 0:
                for key in resInfo:
                        if repoType == "github":
                                if key == "repository":
                                        self.results['header']['repository'] = resInfo[key]
                                if key == "branch":
                                        self.results['header']['branch'] = resInfo[key]
                                if key == "connector":
                                        self.results['header']['connection name'] = resInfo[key]
                                if key == "gitId":
                                        self.results['header']['gitId'] = resInfo[key]

                        if repoType == "installer":
                                if key == "installer_type":
                                        self.results['header']['installer_type'] = resInfo[key]
                                if key == "homeurl":
                                        self.results['header']['homeurl'] = resInfo[key]
                                if key == "projecturl":
                                        self.results['header']['projecturl'] = resInfo[key]
                                if key == "project":
                                        self.results['header']['project'] = resInfo[key]

            if repoType == "local" or repoType == "source":
                self.results['header']['scan_project'] = self.results['header']['target']
            elif repoType == "github":
                self.results['header']['scan_project'] = self.results['header']['repository']
            elif repoType == "installer":
                self.results['header']['scan_project'] = self.results['header']['project']
                
            self.vuln_depe = []
            self.severity = {}
            self.vuln_found = []
            self.testedWith = []
            self.dependanciesCount = []


        def gtEq(self, vers1, mVers):
                if parse_version(mVers) >= parse_version(vers1):
                        return True
                else:
                        return False

        def gt(self, vers1, mVers):
                if parse_version(mVers) > parse_version(vers1):
                        return True
                else:
                        return False

        def ltEq(self, vers1, mVers):
                if parse_version(mVers) <= parse_version(vers1):
                        return True
                else:
                        return False


        def lt(self, vers1, mVers):
                if parse_version(mVers) < parse_version(vers1):
                        return True
                else:
                        return False

        def eq(self, vers1, mVers):
                if parse_version(mVers) == parse_version(vers1):
                        return True
                else:
                        return False

        def getMatchVersionLists(self, product, vendor, version):
            if self.language == "php":
                response = requests.get('https://semver.mwl.be/packages/%s/%s/match?constraint=%s&minimum-stability=stable' % (vendor, product, version))
                data = response.text
                data = json.loads(data)
                res = {}
                for d in data:
                        s = d.split(".")[0]
                        if s not in res:
                                res[s] = []
                        res[s].append(d)

                vers = []
                for s in res:
                        vers.append("%s/%s" % (self.minValue(res[s]), self.maxValue(res[s])))

                return vers

            if self.language == "javascript":
                response = requests.get('https://cors-proxy-ee2bb0df.internal.npmjs.com/%s' % product)
                data = response.text
                data = json.loads(data)
                versionArray = data['versions']

                versions = []
                for ver in versionArray:
                        versions.append(ver)

                status, output = getstatusoutput("semver -r %s %s" % (version, ' '.join(versions)))
                mVersions = output.split('\n')
                
                res = {}
                for d in mVersions:
                        s = d.split(".")[0]
                        if s not in res:
                                res[s] = []
                        res[s].append(d)


                vers = []
                for s in res:
                        vers.append("%s/%s" % (self.minValue(res[s]), self.maxValue(res[s])))

                return vers
        

        def matchVer(self, product, vendor, cve_id, reference, versions, vuln_name, vectorString, baseScore, patch, pub_date, severity, mVers, cwe_text, attackVector, exploits):
            if self.language == "java":
                mVer = mVers
                dependsVer = ''

                severity = severity.upper()             

                for vers in versions.split(","):
                        if re.findall(r'\[.*:.*\]', str(vers)):
                            vers1 = re.findall(r'\[(.*):', str(vers))[0]
                            vers2 = re.findall(r':(.*)\]', str(vers))[0]

                            if self.gtEq(vers1, mVer) and self.ltEq(vers2, mVer):
                                res = {}
                                
                                res['CVEID'] = str(cve_id)
                                res['Product'] = str(product)
                                res['Vendor'] = str(vendor)
                                res['Severity'] = str(severity)
                                res['VectorString'] = str(vectorString)
                                res['Vulnerability Name'] = str(vuln_name)
                                res['Patched Version'] = str(patch)
                                res['Reference'] = str(reference)
                                res['Publish Date'] = str(pub_date)
                                res['Installed Version'] = str(mVers)
                                res['Versions'] = str(versions)
                                res['CWE'] = str(cwe_text)
                                res['AttackVector'] = str(attackVector)
                                if len(exploits) > 0:
                                    res['exploits'] = ','.join(exploits)
                                else:
                                    res['exploits'] = ''
                                res['Dependancies'] = str(dependsVer)

                                if severity not in self.severity:
                                        self.severity[severity] = []
                                
                                if res not in self.severity[severity]:
                                        self.severity[severity].append(res)

                                if res not in self.results['Issues']['data']:
                                        self.results['Issues']['data'].append(res)

                                        self.vuln_found.append(product)
                                        if product not in self.vuln_depe:
                                                self.vuln_depe.append(product)

                        elif re.findall(r'\(.*:.*\]', str(vers)):
                            vers1 = re.findall(r'\((.*):', str(vers))[0]
                            vers2 = re.findall(r':(.*)\]', str(vers))[0]

                            if self.gt(vers1, mVer) and self.ltEq(vers2, mVer):
                                res = {}
                               
                                res['CVEID'] = str(cve_id)
                                res['Product'] = str(product)
                                res['Vendor'] = str(vendor)
                                res['Severity'] = str(severity)
                                res['VectorString'] = str(vectorString)
                                res['Vulnerability Name'] = str(vuln_name)
                                res['Patched Version'] = str(patch)
                                res['Reference'] = str(reference)
                                res['Publish Date'] = str(pub_date)
                                res['Installed Version'] = str(mVers)
                                res['Versions'] = str(versions)
                                res['CWE'] = str(cwe_text)
                                res['AttackVector'] = str(attackVector)
                                if len(exploits) > 0:
                                    res['exploits'] = ','.join(exploits)
                                else:
                                    res['exploits'] = ''
                                res['Dependancies'] = str(dependsVer)

                                if severity not in self.severity:
                                        self.severity[severity] = []
                                
                                if res not in self.severity[severity]:
                                        self.severity[severity].append(res)

                                if res not in self.results['Issues']['data']:
                                        self.results['Issues']['data'].append(res)

                                        self.vuln_found.append(product)
                                        if product not in self.vuln_depe:
                                                self.vuln_depe.append(product)

                        elif re.findall(r'\[.*:.*\)', str(vers)):
                            vers1 = re.findall(r'\[(.*):', str(vers))[0]
                            vers2 = re.findall(r':(.*)\)', str(vers))[0]

                            if self.gtEq(vers1, mVer) and self.lt(vers2, mVer):
                                res = {}
                               
                                res['CVEID'] = str(cve_id)
                                res['Product'] = str(product)
                                res['Vendor'] = str(vendor)
                                res['Severity'] = str(severity)
                                res['VectorString'] = str(vectorString)
                                res['Vulnerability Name'] = str(vuln_name)
                                res['Patched Version'] = str(patch)
                                res['Reference'] = str(reference)
                                res['Publish Date'] = str(pub_date)
                                res['Installed Version'] = str(mVers)
                                res['Versions'] = str(versions)
                                res['CWE'] = str(cwe_text)
                                res['AttackVector'] = str(attackVector)
                                if len(exploits) > 0:
                                    res['exploits'] = ','.join(exploits)
                                else:
                                    res['exploits'] = ''
                                res['Dependancies'] = str(dependsVer)

                                if severity not in self.severity:
                                        self.severity[severity] = []
                                
                                if res not in self.severity[severity]:
                                        self.severity[severity].append(res)

                                if res not in self.results['Issues']['data']:
                                        self.results['Issues']['data'].append(res)

                                        self.vuln_found.append(product)
                                        if product not in self.vuln_depe:
                                                self.vuln_depe.append(product)

                        elif re.findall(r'\(.*:.*\)', str(vers)):
                            vers1 = re.findall(r'\((.*):', str(vers))[0]
                            vers2 = re.findall(r':(.*)\)', str(vers))[0]

                            if self.gt(vers1, mVer) and self.lt(vers2, mVer):
                                res = {}
                              
                                res['CVEID'] = str(cve_id)
                                res['Product'] = str(product)
                                res['Vendor'] = str(vendor)
                                res['Severity'] = str(severity)
                                res['VectorString'] = str(vectorString)
                                res['Vulnerability Name'] = str(vuln_name)
                                res['Patched Version'] = str(patch)
                                res['Reference'] = str(reference)
                                res['Publish Date'] = str(pub_date)
                                res['Installed Version'] = str(mVers)
                                res['Versions'] = str(versions)
                                res['CWE'] = str(cwe_text)
                                res['AttackVector'] = str(attackVector)
                                if len(exploits) > 0:
                                    res['exploits'] = ','.join(exploits)
                                else:
                                    res['exploits'] = ''
                                res['Dependancies'] = str(dependsVer)

                                if severity not in self.severity:
                                        self.severity[severity] = []
                                
                                if res not in self.severity[severity]:
                                        self.severity[severity].append(res)

                                if res not in self.results['Issues']['data']:
                                        self.results['Issues']['data'].append(res)


                                        self.vuln_found.append(product)
                                        if product not in self.vuln_depe:
                                                self.vuln_depe.append(product)

                        elif re.findall(r'\(.*:.*\)', str(vers)):
                            vers1 = re.findall(r'\((.*):', str(vers))[0]
                            vers2 = re.findall(r':(.*)\)', str(vers))[0]

                            if self.gt(vers1, mVer) and self.lt(vers2, mVer):
                                res = {}
                               
                                res['CVEID'] = str(cve_id)
                                res['Product'] = str(product)
                                res['Vendor'] = str(vendor)
                                res['Severity'] = str(severity)
                                res['VectorString'] = str(vectorString)
                                res['Vulnerability Name'] = str(vuln_name)
                                res['Patched Version'] = str(patch)
                                res['Reference'] = str(reference)
                                res['Publish Date'] = str(pub_date)
                                res['Installed Version'] = str(mVers)
                                res['Versions'] = str(versions)
                                res['CWE'] = str(cwe_text)
                                res['AttackVector'] = str(attackVector)
                                if len(exploits) > 0:
                                    res['exploits'] = ','.join(exploits)
                                else:
                                    res['exploits'] = ''
                                res['Dependancies'] = str(dependsVer)

                                if severity not in self.severity:
                                        self.severity[severity] = []
                                
                                if res not in self.severity[severity]:
                                        self.severity[severity].append(res)

                                if res not in self.results['Issues']['data']:
                                        self.results['Issues']['data'].append(res)

                                        self.vuln_found.append(product)
                                        if product not in self.vuln_depe:
                                                self.vuln_depe.append(product)

                        else:
                            vers1 = str(vers)
                            if self.eq(vers1, mVer):
                                res = {}

                                res['CVEID'] = str(cve_id)
                                res['Product'] = str(product)
                                res['Vendor'] = str(vendor)
                                res['Severity'] = str(severity)
                                res['VectorString'] = str(vectorString)
                                res['Vulnerability Name'] = str(vuln_name)
                                res['Patched Version'] = str(patch)
                                res['Reference'] = str(reference)
                                res['Publish Date'] = str(pub_date)
                                res['Installed Version'] = str(mVers)
                                res['Versions'] = str(versions)
                                res['CWE'] = str(cwe_text)
                                res['AttackVector'] = str(attackVector)
                                if len(exploits) > 0:
                                    res['exploits'] = ','.join(exploits)
                                else:
                                    res['exploits'] = ''
                                res['Dependancies'] = str(dependsVer)

                                if severity not in self.severity:
                                        self.severity[severity] = []
                                
                                if res not in self.severity[severity]:
                                        self.severity[severity].append(res)

                                if res not in self.results['Issues']['data']:
                                        self.results['Issues']['data'].append(res)

                                        self.vuln_found.append(product)
                                        if product not in self.vuln_depe:
                                                self.vuln_depe.append(product)

            if self.language == "python":
                if self.language == "python":
                        mVer = self.checkSemantic(product, mVers)
                        dependsVer = ''
                        

                if str(mVer) != "0.0":
                    severity = severity.upper()         

                    for vers in versions.split(","):
                        if re.findall(r'\[.*:.*\]', str(vers)):
                            vers1 = re.findall(r'\[(.*):', str(vers))[0]
                            vers2 = re.findall(r':(.*)\]', str(vers))[0]

                            if self.gtEq(vers1, mVer) and self.ltEq(vers2, mVer):
                                res = {}
                                
                                res['CVEID'] = str(cve_id)
                                res['Product'] = str(product)
                                res['Vendor'] = str(vendor)
                                res['Severity'] = str(severity)
                                res['VectorString'] = str(vectorString)
                                res['Vulnerability Name'] = str(vuln_name)
                                res['Patched Version'] = str(patch)
                                res['Reference'] = str(reference)
                                res['Publish Date'] = str(pub_date)
                                res['Installed Version'] = str(mVers)
                                res['Versions'] = str(versions)
                                res['CWE'] = str(cwe_text)
                                res['AttackVector'] = str(attackVector)
                                if len(exploits) > 0:
                                    res['exploits'] = ','.join(exploits)
                                else:
                                    res['exploits'] = ''
                                res['Dependancies'] = str(dependsVer)

                                if severity not in self.severity:
                                        self.severity[severity] = []
                                
                                if res not in self.severity[severity]:
                                        self.severity[severity].append(res)

                                if res not in self.results['Issues']['data']:
                                        self.results['Issues']['data'].append(res)
                                 
                                        self.vuln_found.append(product)
                                        if product not in self.vuln_depe:
                                                self.vuln_depe.append(product)

                        elif re.findall(r'\(.*:.*\]', str(vers)):
                            vers1 = re.findall(r'\((.*):', str(vers))[0]
                            vers2 = re.findall(r':(.*)\]', str(vers))[0]

                            if self.gt(vers1, mVer) and self.ltEq(vers2, mVer):
                                res = {}

                                res['CVEID'] = str(cve_id)
                                res['Product'] = str(product)
                                res['Vendor'] = str(vendor)
                                res['Severity'] = str(severity)
                                res['VectorString'] = str(vectorString)
                                res['Vulnerability Name'] = str(vuln_name)
                                res['Patched Version'] = str(patch)
                                res['Reference'] = str(reference)
                                res['Publish Date'] = str(pub_date)
                                res['Installed Version'] = str(mVers)
                                res['Versions'] = str(versions)
                                res['CWE'] = str(cwe_text)
                                res['AttackVector'] = str(attackVector)
                                if len(exploits) > 0:
                                    res['exploits'] = ','.join(exploits)
                                else:
                                    res['exploits'] = ''
                                res['Dependancies'] = str(dependsVer)

                                if severity not in self.severity:
                                        self.severity[severity] = []
                                
                                if res not in self.severity[severity]:
                                        self.severity[severity].append(res)

                                if res not in self.results['Issues']['data']:
                                        self.results['Issues']['data'].append(res)

                                        self.vuln_found.append(product)
                                        if product not in self.vuln_depe:
                                                self.vuln_depe.append(product)

                        elif re.findall(r'\[.*:.*\)', str(vers)):
                            vers1 = re.findall(r'\[(.*):', str(vers))[0]
                            vers2 = re.findall(r':(.*)\)', str(vers))[0]

                            if self.gtEq(vers1, mVer) and self.lt(vers2, mVer):
                                res = {}

                                res['CVEID'] = str(cve_id)
                                res['Product'] = str(product)
                                res['Vendor'] = str(vendor)
                                res['Severity'] = str(severity)
                                res['VectorString'] = str(vectorString)
                                res['Vulnerability Name'] = str(vuln_name)
                                res['Patched Version'] = str(patch)
                                res['Reference'] = str(reference)
                                res['Publish Date'] = str(pub_date)
                                res['Installed Version'] = str(mVers)
                                res['Versions'] = str(versions)
                                res['CWE'] = str(cwe_text)
                                res['AttackVector'] = str(attackVector)
                                if len(exploits) > 0:
                                    res['exploits'] = ','.join(exploits)
                                else:
                                    res['exploits'] = ''
                                res['Dependancies'] = str(dependsVer)

                                if severity not in self.severity:
                                        self.severity[severity] = []
                                
                                if res not in self.severity[severity]:
                                        self.severity[severity].append(res)

                                if res not in self.results['Issues']['data']:
                                        self.results['Issues']['data'].append(res)

                                        self.vuln_found.append(product)
                                        if product not in self.vuln_depe:
                                                self.vuln_depe.append(product)

                        elif re.findall(r'\(.*:.*\)', str(vers)):
                            vers1 = re.findall(r'\((.*):', str(vers))[0]
                            vers2 = re.findall(r':(.*)\)', str(vers))[0]

                            if self.gt(vers1, mVer) and self.lt(vers2, mVer):
                                res = {}

                                res['CVEID'] = str(cve_id)
                                res['Product'] = str(product)
                                res['Vendor'] = str(vendor)
                                res['Severity'] = str(severity)
                                res['VectorString'] = str(vectorString)
                                res['Vulnerability Name'] = str(vuln_name)
                                res['Patched Version'] = str(patch)
                                res['Reference'] = str(reference)
                                res['Publish Date'] = str(pub_date)
                                res['Installed Version'] = str(mVers)
                                res['Versions'] = str(versions)
                                res['CWE'] = str(cwe_text)
                                res['AttackVector'] = str(attackVector)
                                if len(exploits) > 0:
                                    res['exploits'] = ','.join(exploits)
                                else:
                                    res['exploits'] = ''
                                res['Dependancies'] = str(dependsVer)

                                if severity not in self.severity:
                                        self.severity[severity] = []
                                
                                if res not in self.severity[severity]:
                                        self.severity[severity].append(res)

                                if res not in self.results['Issues']['data']:
                                        self.results['Issues']['data'].append(res)

                                        self.vuln_found.append(product)
                                        if product not in self.vuln_depe:
                                                self.vuln_depe.append(product)

                        elif re.findall(r'\(.*:.*\)', str(vers)):
                            vers1 = re.findall(r'\((.*):', str(vers))[0]
                            vers2 = re.findall(r':(.*)\)', str(vers))[0]

                            if self.gt(vers1, mVer) and self.lt(vers2, mVer):
                                res = {}

                                res['CVEID'] = str(cve_id)
                                res['Product'] = str(product)
                                res['Vendor'] = str(vendor)
                                res['Severity'] = str(severity)
                                res['VectorString'] = str(vectorString)
                                res['Vulnerability Name'] = str(vuln_name)
                                res['Patched Version'] = str(patch)
                                res['Reference'] = str(reference)
                                res['Publish Date'] = str(pub_date)
                                res['Installed Version'] = str(mVers)
                                res['Versions'] = str(versions)
                                res['CWE'] = str(cwe_text)
                                res['AttackVector'] = str(attackVector)
                                if len(exploits) > 0:
                                    res['exploits'] = ','.join(exploits)
                                else:
                                    res['exploits'] = ''
                                res['Dependancies'] = str(dependsVer)

                                if severity not in self.severity:
                                        self.severity[severity] = []
                                
                                if res not in self.severity[severity]:
                                        self.severity[severity].append(res)

                                if res not in self.results['Issues']['data']:
                                        self.results['Issues']['data'].append(res)

                                        self.vuln_found.append(product)
                                        if product not in self.vuln_depe:
                                                self.vuln_depe.append(product)

                        else:
                            vers1 = str(vers)
                            if self.eq(vers1, mVer):
                                res = {}
                                
                                res['CVEID'] = str(cve_id)
                                res['Product'] = str(product)
                                res['Vendor'] = str(vendor)
                                res['Severity'] = str(severity)
                                res['VectorString'] = str(vectorString)
                                res['Vulnerability Name'] = str(vuln_name)
                                res['Patched Version'] = str(patch)
                                res['Reference'] = str(reference)
                                res['Publish Date'] = str(pub_date)
                                res['Installed Version'] = str(mVers)
                                res['Versions'] = str(versions)
                                res['CWE'] = str(cwe_text)
                                res['AttackVector'] = str(attackVector)
                                if len(exploits) > 0:
                                    res['exploits'] = ','.join(exploits)
                                else:
                                    res['exploits'] = ''
                                res['Dependancies'] = str(dependsVer)

                                if severity not in self.severity:
                                        self.severity[severity] = []
                                
                                if res not in self.severity[severity]:
                                        self.severity[severity].append(res)

                                if res not in self.results['Issues']['data']:
                                        self.results['Issues']['data'].append(res)

                                        self.vuln_found.append(product)
                                        if product not in self.vuln_depe:
                                                self.vuln_depe.append(product)

            if self.language == "php":
                if self.language == "php":
                        mVers = self.getMatchVersionLists(product, vendor, mVers)
                        if "%s@%s" % (product, mVers) in self.resultsDepends:
                                dependsVer = ','.join(self.resultsDepends["%s@%s" % (product, mVers)])
                        else:
                                dependsVer = ''
                        

                severity = severity.upper()             

                for mVer in mVers:
                    mVer1 = mVer.split("/")[0]
                    mVer2 = mVer.split("/")[1]
                    for vers in versions.split(","):
                        if re.findall(r'\[.*:.*\]', str(vers)):
                            vers1 = re.findall(r'\[(.*):', str(vers))[0]
                            vers2 = re.findall(r':(.*)\]', str(vers))[0]

                            if self.gtEq(vers1, mVer1) and self.ltEq(vers2, mVer2):
                                res = {}

                                res['CVEID'] = str(cve_id)
                                res['Product'] = str(product)
                                res['Vendor'] = str(vendor)
                                res['Severity'] = str(severity)
                                res['VectorString'] = str(vectorString)
                                res['Vulnerability Name'] = str(vuln_name)
                                res['Patched Version'] = str(patch)
                                res['Reference'] = str(reference)
                                res['Publish Date'] = str(pub_date)
                                res['Installed Version'] = str(mVers)
                                res['Versions'] = str(versions)
                                res['CWE'] = str(cwe_text)
                                res['AttackVector'] = str(attackVector)
                                if len(exploits) > 0:
                                    res['exploits'] = ','.join(exploits)
                                else:
                                    res['exploits'] = ''
                                res['Dependancies'] = str(dependsVer)

                                if severity not in self.severity:
                                        self.severity[severity] = []
                                
                                if res not in self.severity[severity]:
                                        self.severity[severity].append(res)

                                if res not in self.results['Issues']['data']:
                                        self.results['Issues']['data'].append(res)

                                        self.vuln_found.append(product)
                                        if product not in self.vuln_depe:
                                                self.vuln_depe.append(product)

                        elif re.findall(r'\(.*:.*\]', str(vers)):
                            vers1 = re.findall(r'\((.*):', str(vers))[0]
                            vers2 = re.findall(r':(.*)\]', str(vers))[0]

                            if self.gt(vers1, mVer1) and self.ltEq(vers2, mVer2):
                                res = {}

                                res['CVEID'] = str(cve_id)
                                res['Product'] = str(product)
                                res['Vendor'] = str(vendor)
                                res['Severity'] = str(severity)
                                res['VectorString'] = str(vectorString)
                                res['Vulnerability Name'] = str(vuln_name)
                                res['Patched Version'] = str(patch)
                                res['Reference'] = str(reference)
                                res['Publish Date'] = str(pub_date)
                                res['Installed Version'] = str(mVers)
                                res['Versions'] = str(versions)
                                res['CWE'] = str(cwe_text)
                                res['AttackVector'] = str(attackVector)
                                if len(exploits) > 0:
                                    res['exploits'] = ','.join(exploits)
                                else:
                                    res['exploits'] = ''
                                res['Dependancies'] = str(dependsVer)

                                if severity not in self.severity:
                                        self.severity[severity] = []
                                
                                if res not in self.severity[severity]:
                                        self.severity[severity].append(res)

                                if res not in self.results['Issues']['data']:
                                        self.results['Issues']['data'].append(res)

                                        self.vuln_found.append(product)
                                        if product not in self.vuln_depe:
                                                self.vuln_depe.append(product)

                        elif re.findall(r'\[.*:.*\)', str(vers)):
                            vers1 = re.findall(r'\[(.*):', str(vers))[0]
                            vers2 = re.findall(r':(.*)\)', str(vers))[0]

                            if self.gtEq(vers1, mVer1) and self.lt(vers2, mVer2):
                                res = {}

                                res['CVEID'] = str(cve_id)
                                res['Product'] = str(product)
                                res['Vendor'] = str(vendor)
                                res['Severity'] = str(severity)
                                res['VectorString'] = str(vectorString)
                                res['Vulnerability Name'] = str(vuln_name)
                                res['Patched Version'] = str(patch)
                                res['Reference'] = str(reference)
                                res['Publish Date'] = str(pub_date)
                                res['Installed Version'] = str(mVers)
                                res['Versions'] = str(versions)
                                res['CWE'] = str(cwe_text)
                                res['AttackVector'] = str(attackVector)
                                if len(exploits) > 0:
                                    res['exploits'] = ','.join(exploits)
                                else:
                                    res['exploits'] = ''
                                res['Dependancies'] = str(dependsVer)

                                if severity not in self.severity:
                                        self.severity[severity] = []
                                
                                if res not in self.severity[severity]:
                                        self.severity[severity].append(res)

                                if res not in self.results['Issues']['data']:
                                        self.results['Issues']['data'].append(res)

                                        self.vuln_found.append(product)
                                        if product not in self.vuln_depe:
                                                self.vuln_depe.append(product)

                        elif re.findall(r'\(.*:.*\)', str(vers)):
                            vers1 = re.findall(r'\((.*):', str(vers))[0]
                            vers2 = re.findall(r':(.*)\)', str(vers))[0]

                            if self.gt(vers1, mVer1) and self.lt(vers2, mVer2):
                                res = {}

                                res['CVEID'] = str(cve_id)
                                res['Product'] = str(product)
                                res['Vendor'] = str(vendor)
                                res['Severity'] = str(severity)
                                res['VectorString'] = str(vectorString)
                                res['Vulnerability Name'] = str(vuln_name)
                                res['Patched Version'] = str(patch)
                                res['Reference'] = str(reference)
                                res['Publish Date'] = str(pub_date)
                                res['Installed Version'] = str(mVers)
                                res['Versions'] = str(versions)
                                res['CWE'] = str(cwe_text)
                                res['AttackVector'] = str(attackVector)
                                if len(exploits) > 0:
                                    res['exploits'] = ','.join(exploits)
                                else:
                                    res['exploits'] = ''
                                res['Dependancies'] = str(dependsVer)

                                if severity not in self.severity:
                                        self.severity[severity] = []
                                
                                if res not in self.severity[severity]:
                                        self.severity[severity].append(res)

                                if res not in self.results['Issues']['data']:
                                        self.results['Issues']['data'].append(res)

                                        self.vuln_found.append(product)
                                        if product not in self.vuln_depe:
                                                self.vuln_depe.append(product)

                        elif re.findall(r'\(.*:.*\)', str(vers)):
                            vers1 = re.findall(r'\((.*):', str(vers))[0]
                            vers2 = re.findall(r':(.*)\)', str(vers))[0]

                            if self.gt(vers1, mVer1) and self.lt(vers2, mVer2):
                                res = {}

                                res['CVEID'] = str(cve_id)
                                res['Product'] = str(product)
                                res['Vendor'] = str(vendor)
                                res['Severity'] = str(severity)
                                res['VectorString'] = str(vectorString)
                                res['Vulnerability Name'] = str(vuln_name)
                                res['Patched Version'] = str(patch)
                                res['Reference'] = str(reference)
                                res['Publish Date'] = str(pub_date)
                                res['Installed Version'] = str(mVers)
                                res['Versions'] = str(versions)
                                res['CWE'] = str(cwe_text)
                                res['AttackVector'] = str(attackVector)
                                if len(exploits) > 0:
                                    res['exploits'] = ','.join(exploits)
                                else:
                                    res['exploits'] = ''
                                res['Dependancies'] = str(dependsVer)

                                if severity not in self.severity:
                                        self.severity[severity] = []
                                
                                if res not in self.severity[severity]:
                                        self.severity[severity].append(res)

                                if res not in self.results['Issues']['data']:
                                        self.results['Issues']['data'].append(res)

                                        self.vuln_found.append(product)
                                        if product not in self.vuln_depe:
                                                self.vuln_depe.append(product)

                        else:
                            vers1 = str(vers)
                            if self.eq(vers1, mVer2):
                                res = {}

                                res['CVEID'] = str(cve_id)
                                res['Product'] = str(product)
                                res['Vendor'] = str(vendor)
                                res['Severity'] = str(severity)
                                res['VectorString'] = str(vectorString)
                                res['Vulnerability Name'] = str(vuln_name)
                                res['Patched Version'] = str(patch)
                                res['Reference'] = str(reference)
                                res['Publish Date'] = str(pub_date)
                                res['Installed Version'] = str(mVers)
                                res['Versions'] = str(versions)
                                res['CWE'] = str(cwe_text)
                                res['AttackVector'] = str(attackVector)
                                if len(exploits) > 0:
                                    res['exploits'] = ','.join(exploits)
                                else:
                                    res['exploits'] = ''
                                res['Dependancies'] = str(dependsVer)

                                if severity not in self.severity:
                                        self.severity[severity] = []
                                
                                if res not in self.severity[severity]:
                                        self.severity[severity].append(res)

                                if res not in self.results['Issues']['data']:
                                        self.results['Issues']['data'].append(res)

                                        self.vuln_found.append(product)
                                        if product not in self.vuln_depe:
                                                self.vuln_depe.append(product)

            if self.language == "javascript":
                if self.language == "javascript":
                        mVers = self.getMatchVersionLists(product, vendor, mVers)
                        if "%s@%s" % (product, mVers) in self.resultsDepends:
                                dependsVer = ','.join(self.resultsDepends["%s@%s" % (product, mVers)])
                        else:
                                dependsVer = ''
                        
                        
                        if "%s@%s" % (product, mVers) in self.resultsDepends:
                                dependsVer = ','.join(self.resultsDepends["%s@%s" % (product, mVers)])
                        else:
                                dependsVer = ''
                        

                severity = severity.upper()             

                for mVer in mVers:
                    mVer1 = mVer.split("/")[0]
                    mVer2 = mVer.split("/")[1]
                    for vers in versions.split(","):
                        if re.findall(r'\[.*:.*\]', str(vers)):
                            vers1 = re.findall(r'\[(.*):', str(vers))[0]
                            vers2 = re.findall(r':(.*)\]', str(vers))[0]

                            if self.gtEq(vers1, mVer1) and self.ltEq(vers2, mVer2):
                                res = {}

                                res['CVEID'] = str(cve_id)
                                res['Product'] = str(product)
                                res['Vendor'] = str(vendor)
                                res['Severity'] = str(severity)
                                res['VectorString'] = str(vectorString)
                                res['Vulnerability Name'] = str(vuln_name)
                                res['Patched Version'] = str(patch)
                                res['Reference'] = str(reference)
                                res['Publish Date'] = str(pub_date)
                                res['Installed Version'] = str(mVers)
                                res['Versions'] = str(versions)
                                res['CWE'] = str(cwe_text)
                                res['AttackVector'] = str(attackVector)
                                if len(exploits) > 0:
                                    res['exploits'] = ','.join(exploits)
                                else:
                                    res['exploits'] = ''
                                res['Dependancies'] = str(dependsVer)

                                if severity not in self.severity:
                                        self.severity[severity] = []
                                
                                if res not in self.severity[severity]:
                                        self.severity[severity].append(res)

                                if res not in self.results['Issues']['data']:
                                        self.results['Issues']['data'].append(res)

                                        self.vuln_found.append(product)
                                        if product not in self.vuln_depe:
                                                self.vuln_depe.append(product)

                        elif re.findall(r'\(.*:.*\]', str(vers)):
                            vers1 = re.findall(r'\((.*):', str(vers))[0]
                            vers2 = re.findall(r':(.*)\]', str(vers))[0]

                            if self.gt(vers1, mVer1) and self.ltEq(vers2, mVer2):
                                res = {}

                                res['CVEID'] = str(cve_id)
                                res['Product'] = str(product)
                                res['Vendor'] = str(vendor)
                                res['Severity'] = str(severity)
                                res['VectorString'] = str(vectorString)
                                res['Vulnerability Name'] = str(vuln_name)
                                res['Patched Version'] = str(patch)
                                res['Reference'] = str(reference)
                                res['Publish Date'] = str(pub_date)
                                res['Installed Version'] = str(mVers)
                                res['Versions'] = str(versions)
                                res['CWE'] = str(cwe_text)
                                res['AttackVector'] = str(attackVector)
                                if len(exploits) > 0:
                                    res['exploits'] = ','.join(exploits)
                                else:
                                    res['exploits'] = ''
                                res['Dependancies'] = str(dependsVer)

                                if severity not in self.severity:
                                        self.severity[severity] = []
                                
                                if res not in self.severity[severity]:
                                        self.severity[severity].append(res)

                                if res not in self.results['Issues']['data']:
                                        self.results['Issues']['data'].append(res)

                                        self.vuln_found.append(product)
                                        if product not in self.vuln_depe:
                                                self.vuln_depe.append(product)

                        elif re.findall(r'\[.*:.*\)', str(vers)):
                            vers1 = re.findall(r'\[(.*):', str(vers))[0]
                            vers2 = re.findall(r':(.*)\)', str(vers))[0]

                            if self.gtEq(vers1, mVer1) and self.lt(vers2, mVer2):
                                res = {}

                                res['CVEID'] = str(cve_id)
                                res['Product'] = str(product)
                                res['Vendor'] = str(vendor)
                                res['Severity'] = str(severity)
                                res['VectorString'] = str(vectorString)
                                res['Vulnerability Name'] = str(vuln_name)
                                res['Patched Version'] = str(patch)
                                res['Reference'] = str(reference)
                                res['Publish Date'] = str(pub_date)
                                res['Installed Version'] = str(mVers)
                                res['Versions'] = str(versions)
                                res['CWE'] = str(cwe_text)
                                res['AttackVector'] = str(attackVector)
                                if len(exploits) > 0:
                                    res['exploits'] = ','.join(exploits)
                                else:
                                    res['exploits'] = ''
                                res['Dependancies'] = str(dependsVer)

                                if severity not in self.severity:
                                        self.severity[severity] = []
                                
                                if res not in self.severity[severity]:
                                        self.severity[severity].append(res)

                                if res not in self.results['Issues']['data']:
                                        self.results['Issues']['data'].append(res)

                                        self.vuln_found.append(product)
                                        if product not in self.vuln_depe:
                                                self.vuln_depe.append(product)

                        elif re.findall(r'\(.*:.*\)', str(vers)):
                            vers1 = re.findall(r'\((.*):', str(vers))[0]
                            vers2 = re.findall(r':(.*)\)', str(vers))[0]

                            if self.gt(vers1, mVer1) and self.lt(vers2, mVer2):
                                res = {}

                                res['CVEID'] = str(cve_id)
                                res['Product'] = str(product)
                                res['Vendor'] = str(vendor)
                                res['Severity'] = str(severity)
                                res['VectorString'] = str(vectorString)
                                res['Vulnerability Name'] = str(vuln_name)
                                res['Patched Version'] = str(patch)
                                res['Reference'] = str(reference)
                                res['Publish Date'] = str(pub_date)
                                res['Installed Version'] = str(mVers)
                                res['Versions'] = str(versions)
                                res['CWE'] = str(cwe_text)
                                res['AttackVector'] = str(attackVector)
                                if len(exploits) > 0:
                                    res['exploits'] = ','.join(exploits)
                                else:
                                    res['exploits'] = ''
                                res['Dependancies'] = str(dependsVer)

                                if severity not in self.severity:
                                        self.severity[severity] = []
                                
                                if res not in self.severity[severity]:
                                        self.severity[severity].append(res)

                                if res not in self.results['Issues']['data']:
                                        self.results['Issues']['data'].append(res)

                                        self.vuln_found.append(product)
                                        if product not in self.vuln_depe:
                                                self.vuln_depe.append(product)

                        elif re.findall(r'\(.*:.*\)', str(vers)):
                            vers1 = re.findall(r'\((.*):', str(vers))[0]
                            vers2 = re.findall(r':(.*)\)', str(vers))[0]

                            if self.gt(vers1, mVer1) and self.lt(vers2, mVer2):
                                res = {}

                                res['CVEID'] = str(cve_id)
                                res['Product'] = str(product)
                                res['Vendor'] = str(vendor)
                                res['Severity'] = str(severity)
                                res['VectorString'] = str(vectorString)
                                res['Vulnerability Name'] = str(vuln_name)
                                res['Patched Version'] = str(patch)
                                res['Reference'] = str(reference)
                                res['Publish Date'] = str(pub_date)
                                res['Installed Version'] = str(mVers)
                                res['Versions'] = str(versions)
                                res['CWE'] = str(cwe_text)
                                res['AttackVector'] = str(attackVector)
                                if len(exploits) > 0:
                                    res['exploits'] = ','.join(exploits)
                                else:
                                    res['exploits'] = ''
                                res['Dependancies'] = str(dependsVer)

                                if severity not in self.severity:
                                        self.severity[severity] = []
                                
                                if res not in self.severity[severity]:
                                        self.severity[severity].append(res)

                                if res not in self.results['Issues']['data']:
                                        self.results['Issues']['data'].append(res)

                                        self.vuln_found.append(product)
                                        if product not in self.vuln_depe:
                                                self.vuln_depe.append(product)

                        else:
                            vers1 = str(vers)
                            if self.eq(vers1, mVer2):
                                res = {}

                                res['CVEID'] = str(cve_id)
                                res['Product'] = str(product)
                                res['Vendor'] = str(vendor)
                                res['Severity'] = str(severity)
                                res['VectorString'] = str(vectorString)
                                res['Vulnerability Name'] = str(vuln_name)
                                res['Patched Version'] = str(patch)
                                res['Reference'] = str(reference)
                                res['Publish Date'] = str(pub_date)
                                res['Installed Version'] = str(mVers)
                                res['Versions'] = str(versions)
                                res['CWE'] = str(cwe_text)
                                res['AttackVector'] = str(attackVector)
                                if len(exploits) > 0:
                                    res['exploits'] = ','.join(exploits)
                                else:
                                    res['exploits'] = ''
                                res['Dependancies'] = str(dependsVer)

                                if severity not in self.severity:
                                        self.severity[severity] = []
                                
                                if res not in self.severity[severity]:
                                        self.severity[severity].append(res)

                                if res not in self.results['Issues']['data']:
                                        self.results['Issues']['data'].append(res)

                                        self.vuln_found.append(product)
                                        if product not in self.vuln_depe:
                                                self.vuln_depe.append(product)


        def getVulnData(self, productName, vendorName, mVers):
            if productName:
                if productName in self.responseData['results']:
                    for res in self.responseData['results'][productName]:
                        if 'product' in res:
                            product = res['product']
                            vendor = res['vendor']
                            cve_id = res['cve_id']
                            reference = res['reference']
                            versions = res['versions']
                            vuln_name = res['vuln_name']
                            vectorString = res['vectorString']
                            baseScore = res['baseScore']
                            patch = res['patch']
                            pub_date = res['pub_date']
                            severity = res['severity']
                            cwe_text = res['cwe_text']
                            attackVector = res['attackVector']
                            exploits = res['exploits']
        
                            if vendorName:
                                if vendorName == vendor:
                                        self.matchVer(product, vendor, cve_id, reference, versions, vuln_name, vectorString, baseScore, patch, pub_date, severity, mVers, cwe_text, attackVector, exploits)
                            else:
                                self.matchVer(product, vendor, cve_id, reference, versions, vuln_name, vectorString, baseScore, patch, pub_date, severity, mVers, cwe_text, attackVector, exploits)


        def maxValue(self, mVersions):
                ver1 = '0.0'
                for ver in mVersions:
                        if parse_version(ver) > parse_version(ver1):
                                ver1 = ver

                return ver1

        def minValue(self, mVersions):
                ver1 = '999.999.999'
                for ver in mVersions:
                        if parse_version(ver) < parse_version(ver1):
                                ver1 = ver

                return ver1

        def getpipVersions(self, product):
                vers = []
                url = "https://pypi.python.org/pypi/%s/json" % product
                response = requests.get(url, timeout=10)
                if response.status_code == 200:
                        data = response.text
                        data = json.loads(data)
                        for ver in data['releases']:
                                vers.append(str(ver))

                return vers

        def checkSemantic(self, product, versions):
            if self.language == "python":
                try:
                        res = []
                        versions = versions.strip()
                        versions = versions.replace("\\", "")
                        spec = semantic_version.Spec(versions)
                        productVersions = self.getpipVersions(product)

                        for pVersion in productVersions:
                                if re.findall(r'^\d+\.\d+\.\d+', str(pVersion)):
                                        pVersion = re.findall(r'(^\d+\.\d+\.\d+)', str(pVersion))[0]            
                                elif re.findall(r'^\d+\.\d+', str(pVersion)):
                                        pVersion = "%s.0" % re.findall(r'^\d+\.\d+', str(pVersion))[0]
                                else:
                                        pVersion = pVersion

                                if re.findall(r'(\d)\.(0(\d))\.(\d)', str(pVersion)):
                                        fixVer = re.findall(r'(\d)\.(0(\d))\.(\d)', str(pVersion))[0]
                                        pVersion = "%s.%s.%s" % (fixVer[0], fixVer[1].replace('0', ''), fixVer[2])
                                

                                sVersion = semantic_version.Version(pVersion)
                                if sVersion in spec:
                                        res.append(pVersion)

                        return self.maxValue(res)
                except:
                        res = "0.0"
                        return res
                
                

        def getpipDetails(self, product):
                url = "https://pypi.python.org/pypi/%s/json" % product
                response = requests.get(url, timeout=10)
                if response.status_code == 200:
                        data = response.text
                        data = json.loads(data)
                        current_version = data['info']['version']
                        package_url = data['info']['package_url']
                else:
                        current_version = ""
                        package_url = ""

                self.results['vulnerabilities'][product]['latest version'] = current_version
                self.results['vulnerabilities'][product]['package url'] = package_url

        def getUnique(self, lists):
                unique_list = [] 
                for x in lists:
                        if x not in unique_list:
                                unique_list.append(x)
                return unique_list

        def scanPackages(self, inventory, pkgLists, testedWith, dependancy, language, auth=''):
            self.language = language
            self.results['header']['language'] = language
            self.results['header']['scan_source'] = language

            if self.language == "python" or self.language == "php" or self.language == "javascript" or self.language == "java":
                pass
            else:
                print("[ ERROR ] Select language which do you need to scan, user -s <language> option, example -s python")
                sys.exit(1)

            if self.language == "python" or self.language == "php" or self.language == "javascript" or self.language == "java":
                print("[ INFO ] Preparing..., It's will take time to completed")

                packageLists = pkgLists
                self.results['inventory'] = inventory
                self.testedWith = testedWith
                self.resultsDepends = dependancy
                
                self.syncData(packageLists)

                self.results['Issues'] = {}
                self.results['Issues']['data'] = []

                print("[ INFO ] Scanning started")
                for result in tqdm(self.results['inventory']):
                        product = result['product']
                        if 'vendor' in result:
                                vendor = result['vendor']
                        else:
                                vendor = ''
                        versions = result['versions']

                        if product not in self.dependanciesCount:
                                self.dependanciesCount.append(product)

                        self.getVulnData(product, vendor, versions)

                print("[ INFO ] Scanning completed")

                self.results['header']['Tested With'] = ','.join(self.testedWith)
                self.results['header']['Severity'] = {}
                self.results['header']['Total Scanned Dependancies'] = len(self.dependanciesCount)
                self.results['header']['Total Unique Vulnerabilities'] = len(self.vuln_found)
                self.results['header']['Total Vulnerable Dependencies'] = len(self.getUnique(self.vuln_depe))

                for severity in self.severity:
                        self.results['header']['Severity'][severity] = len(self.severity[severity])

                with open("%s/%s.json" % (self.report_path, self.report_name), "w") as f:
                        json.dump(self.results, f)

                print("[ INFO ] Vulnerabilities Report ready - %s/%s.json" % (self.report_path, self.report_name))

                reportLists = []
                reportLists.append("%s/%s.json" % (self.report_path, self.report_name))

                if self.report_upload.lower() == 'yes':
                        if auth:
                                resReport = niah_viewreport(reportLists, 'yes', auth)
                        else:
                                resReport = niah_viewreport(reportLists, 'yes')
                else:
                        resReport = niah_viewreport(reportLists, 'no')


        def syncData(self, productLists):
            try:
                if self.language == "python":
                        url = "http://%s/api/scan/language/python" % SERVER_IP
                elif self.language == "javascript":
                        url = "http://%s/api/scan/language/javascript" % SERVER_IP
                elif self.language == "php":
                        url = "http://%s/api/scan/vendor/language/php" % SERVER_IP
                elif self.language == "java":
                        url = "http://%s/api/scan/language/java" % SERVER_IP
                else:
                        print("[ OK ] Language argument is not correct or not specified")
                        sys.exit(1)
                                

                payload = "{\"data\": \""+ ','.join(productLists) + "\"}"

                response = requests.request("POST", url, headers=self.headers, data = payload)
                responseData = response.json()
                self.responseData = responseData
            except:
                print("[ ERROR ] Database sync error! Check internet connectivity")
                sys.exit(1)


if __name__ == "__main__":
        helpText = """
                        Need four arguments : <connectory type> <connector name> <repo name> <branch name>
                        Example  : 
                                niah scan dependancies github conn1 repo1 branch1 (If you need to pull specific branch)
                                niah scan dependancies github conn1 repo1 '' (If you need to pull latest available code)
                   """

        parser = argparse.ArgumentParser()
        parser.add_argument('-v', '--version', action='version',
                    version='%(prog)s 1.0')

        commandss = parser.add_subparsers(dest='operation')

        cmd1_parser = commandss.add_parser('scan')
        cmd1sub_parser = cmd1_parser.add_subparsers(dest='scan')
        cmd4sys_parser = cmd1sub_parser.add_parser('system')
        cmd4app_parser = cmd1sub_parser.add_parser('application')
        cmd4dep_parser = cmd1sub_parser.add_parser('dependancies')

        cmd4sys_parser.add_argument('-target', '--target', type=str, help='select target aws/azure/local/docker')
        cmd4sys_parser.add_argument('-name', '--name', type=str, help='connector name or regex')
        cmd4sys_parser.add_argument('-namespace', '--namespace', type=str, help='namespace name or regex')
        cmd4sys_parser.add_argument('-dockerimage', '--dockerimage', type=str, help='dockerimage name or regex')
        cmd4sys_parser.add_argument('-tags', '--tags', type=str, help='tags name or regex')        

        cmd4app_parser.add_argument('-target', '--target', type=str, help='select target aws/azure/local/docker')
        cmd4app_parser.add_argument('-name', '--name', type=str, help='connector name or regex')
        cmd4app_parser.add_argument('-namespace', '--namespace', type=str, help='namespace name or regex')
        cmd4app_parser.add_argument('-dockerimage', '--dockerimage', type=str, help='dockerimage name or regex')
        cmd4app_parser.add_argument('-tags', '--tags', type=str, help='tags name or regex')

        cmd4dep_parser.add_argument('-target', '--target', type=str, help='select target aws/azure/local/docker')
        cmd4dep_parser.add_argument('-name', '--name', type=str, help='connector name or regex')
        cmd4dep_parser.add_argument('-namespace', '--namespace', type=str, help='namespace name or regex')
        cmd4dep_parser.add_argument('-dockerimage', '--dockerimage', type=str, help='dockerimage name or regex')
        cmd4dep_parser.add_argument('-tags', '--tags', type=str, help='tags name or regex')
        cmd4dep_parser.add_argument('-lang', '--lang', type=str, help='provide the dependancies what you have to scan from the list pip/npm/maven/composer')


        cmd1_parser.add_argument('-r', '--reportpath', type=str,  help='Report path where you need to store.')
        cmd1_parser.add_argument('-n', '--projectname', type=str,  help='Project name.')
        cmd1_parser.add_argument('-up', '--upload', type=str,  help='Upload report yes/no')
        cmd1_parser.add_argument('-l', '--label', type=str,  help='Project label')

        cmd2_parser = commandss.add_parser('auth')
        cmd2_parser.add_argument('-u', '--username', type=str,  help='Username')
        cmd2_parser.add_argument('-p', '--password', type=str,  help='Password')

        cmd3_parser = commandss.add_parser('watch')
        cmd3_parser.add_argument('-f', '--file', type=str,  help='Report file, which is you need to be process')
        cmd3_parser.add_argument('-r', '--reportpath', type=str,  help='Report path, where you need to process report file')
        cmd3_parser.add_argument('-ov', '--ov', type=str, help='select option from `list/view/upload`, what operation you need to perform', default='upload')

        cmd4_parser = commandss.add_parser('connector')
        commands4 = cmd4_parser.add_subparsers(title='connectors')

        cmd4a_parser = commands4.add_parser('add')
        commands5a = cmd4a_parser.add_subparsers(title='Add Connector')

        cmd4d_parser = commands4.add_parser('del')
        commands5d = cmd4d_parser.add_subparsers(title='Delete Connector')
        
        cmd41a_parser = commands5a.add_parser('docker')
        cmd41a_parser.add_argument('-name', '--name', help='Connector name.', required=True)
        cmd41a_parser.add_argument('-url', '--url', type=str,  help='Enter docker url', required=True)
        cmd41a_parser.add_argument('-uid', '--uid', type=str,  help='Enter username', required=True)
        cmd41a_parser.add_argument('-secret', '--secret', type=str,  help='Enter secret', required=True)

        cmd41d_parser = commands5d.add_parser('docker')
        cmd41d_parser.add_argument('--name', help='Connector name.', required=True)

        cmd42a_parser = commands5a.add_parser('aws')
        cmd42a_parser.add_argument('-name', '--name', help='Connector name.', required=True)
        cmd42a_parser.add_argument('-url', '--url', type=str,  help='Enter azure url', required=True)
        cmd42a_parser.add_argument('-uid', '--uid', type=str,  help='Enter username', required=True)
        cmd42a_parser.add_argument('-secret', '--secret', type=str,  help='Enter secret', required=True)
        cmd42a_parser.add_argument('-region', '--region', type=str,  help='Enter region', required=True)


        cmd42d_parser = commands5d.add_parser('aws')
        cmd42d_parser.add_argument('--name', '--name', help='Connector name.', required=True)

        cmd43a_parser = commands5a.add_parser('azure')
        cmd43a_parser.add_argument('-name', '--name',  help='Connector name.', required=True)
        cmd43a_parser.add_argument('-reponame', '--reponame', type=str,  help='Enter azure repo name', default='')
        cmd43a_parser.add_argument('-uid', '--uid', type=str,  help='Enter username', required=True)
        cmd43a_parser.add_argument('-secret', '--secret', type=str,  help='Enter secret', required=True)

        cmd43d_parser = commands5d.add_parser('azure')
        cmd43d_parser.add_argument('--name', '--name', help='Connector name.', required=True)

        cmd44a_parser = commands5a.add_parser('github')
        cmd44a_parser.add_argument('-name', '--name', help='Connector name.', required=True)
        cmd44a_parser.add_argument('-uid', '--uid', type=str, help='Username', required=True)
        cmd44a_parser.add_argument('-token', '--token', type=str, help='Password/Token', required=True)
        cmd44a_parser.add_argument('-url', '--url', type=str, help='URL', default='github.com')

        cmd44d_parser = commands5d.add_parser('github')
        cmd44d_parser.add_argument('-name', '--name', help='Connector name.', required=True)


        results = parser.parse_args()

        targetLists = ['aws', 'azure', 'docker', 'local']
        if results.operation == "scan":
                if results.name:
                        if not results.target:
                                print("[ OK ] Select target type from lists, aws/docker/azure using --target option")
                                sys.exit(1)

                if results.target:
                        if results.target not in targetLists:
                                print("[ OK ] Select target type from lists, aws/docker/azure/local using --target option")
                                sys.exit(1)

                        if results.target != "local":
                                if not results.name:
                                        print("[ OK ] Select target connection name using --name option")
                                        sys.exit(1)   
                        else:
                                results.name = "local"  

                if not results.target:
                        results.target = "local"
                        results.name = "local"        

                if results.scan == "dependancies":
                    if not results.target:
                        target = os.getcwd()
        
                if not results.reportpath:
                        results.reportpath = '.'

                if not results.projectname:
                        results.projectname = ''

                if not results.label:
                        results.label = "latest"        

                if not results.upload:
                        results.upload = 'yes'


                if results.scan == "system":
                        res = niah_getDockerImage(results.target, results.name)
                        imagesLists = res.getImages(results.target, results.name, results.namespace, results.dockerimage, results.tags)

                        if len(imagesLists) > 0:
                                for connn in imagesLists:
                                        for idata in imagesLists[connn]:
                                                imagename = idata['imagename']
                                                os_name = idata['os_name']
                                                os_version = idata['os_version']
                                                os_type = idata['os_type']
                                                res = niah_platformscan(results.reportpath, results.projectname, results.label, results.upload)
                                                if results.target == "local":
                                                        res.scanPlatformPackage(imagename, os_name, os_version, os_type, results.target)
                                                else:
                                                        res.scanPlatformPackage(imagename, os_name, os_version, os_type)

                elif results.scan == "application":
                        res = applicationVulnerabilities(results.reportpath, results.projectname, results.label, results.upload)
                        res.scanPackage()

                elif results.scan == "dependancies":
                        res = niah_dependancyscan(results.reportpath, results.projectname, target, results.label, results.upload, repoType, resInfo)
                        res.scanPackages(inventory, pkgLists, testedWidth, dependancy, language)
                else:
                        print("[ INFO ] select proper argument, system/application/dependancies")
                        sys.exit(1)

        elif results.operation == "watch":
            if not results.reportpath:
                results.reportpath = '.'
                srcText = '%s/*.json' % (os.getcwd())
            else:
                srcText = '%s/*.json' % results.reportpath

            filelists = []

            if results.file:
                if not results.reportpath:
                        if path.exists('./%s' % results.file):
                                filelists.append(results.file)
                        else:
                                print("[ ERROR ] Report %s file does not exists" % results.file)
                else:
                        if path.exists('%s/%s' % (results.reportpath, results.file)):
                                filelists.append('%s/%s' % (results.reportpath, results.file))
                        else:
                                print("[ ERROR ] Report %s%s file does not exists" % (results.reportpath, results.file))
            else:
                for file in glob2.glob(srcText):
                        file = os.path.abspath(file)
                        filename = os.path.basename(file)
                        if re.findall(r'\d+-\d+-\d+_\d+:\d+:\d+\.json', str(filename)):
                                filelists.append(file)

            if len(filelists) > 0:
                if results.ov == "view":
                        res = niah_viewreport(filelists, 'no')
                elif results.ov == "list":
                        for filename in filelists:
                                print("Report File - %s" % filename)
                else:
                        res = niah_viewreport(filelists, 'yes')
            else:
                print("[ INFO ] Not found any reports, use -r option to set report directory path")
                sys.exit(1)

        elif results.operation == "auth":
            headers = {
                'Content-Type': 'application/json',
            }
                
            if not results.username or not results.password:
                print("[ INFO ] set --username and --password arguments")
                sys.exit(1)

            data = '{"username": "%s", "password": "%s"}' % (results.username, results.password)

            response = requests.post('http://%s/api/auth' % SERVER_IP, headers=headers, data=data)
            if response.status_code == 200:
                res = response.text
                access_token = json.loads(res)['access_token']

                if not path.exists("/tmp/niah.json"):
                        configData = {}
                else:
                        with open('/tmp/niah.json') as f:
                                configData = json.load(f)

                configData['access_token'] = access_token
                configData['username'] = results.username
                configData['password'] = results.password

                with open('/tmp/niah.json', 'w') as f:
                        json.dump(configData, f)
                
                print("[ OK ] Login Successfully!")
            else:
                print("[ OK ] Failed login, check credential")
                sys.exit(1)

        elif results.operation == "connector":
                print(len(sys.argv))
                if len(sys.argv) == 2:
                        print('select operation from list add/del')
                        sys.exit(1)
                if len(sys.argv) == 3:
                        print('select target connector from list aws/docker/azure')
                        sys.exit(1)

                if not path.exists("/tmp/niah.json"):
                    configData = {}
                else:
                    with open('/tmp/niah.json') as f:
                        configData = json.load(f)

                if 'connector' not in configData:
                        configData['connector'] = {}

                if sys.argv[3] == "docker":
                        if sys.argv[2] == "add":
                            try:
                                name = results.name
                                url = results.url
                                uid = results.uid
                                secret = results.secret

                                res = {}
                                res['name'] = name
                                res['uid'] = uid
                                res['url'] = url
                                res['secret'] = secret

                                if 'docker' not in configData['connector']:
                                        configData['connector']['docker'] = []

                                if res not in configData['connector']['docker']:
                                        configData['connector']['docker'].append(res)

                                print("[ OK ] %s connector added" % results.name)
                            except:
                                print("[ ERROR ] Error in add connector")
                        elif sys.argv[2] == "del":
                            try:
                                for res in configData['connector']['docker']:
                                        if res['name'] == results.name:
                                                res1 = {}
                                                res1['name'] = res['name']
                                                res1['uid'] = res['uid']
                                                res1['url'] = res['url']
                                                res1['secret'] = res['secret']
                                                configData['connector']['docker'].remove(res1)
                                                break
                                print("[ OK ] %s connector deleted" % results.name)
                            except:
                                print("[ ERROR ] Error in delete connector")
                        else:
                                print("[ OK ] Select add/del option")
                                sys.exit(1)

                elif sys.argv[3] == "aws":
                        if sys.argv[2] == "add":
                            try:
                                name = results.name
                                url = results.url
                                uid = results.uid
                                secret = results.secret
                                region = results.region

                                res = {}
                                res['name'] = name
                                res['uid'] = uid
                                res['url'] = url
                                res['secret'] = secret
                                res['region'] = region

                                if 'aws' not in configData['connector']:
                                        configData['connector']['aws'] = []

                                if res not in configData['connector']['aws']:
                                        configData['connector']['aws'].append(res)

                                print("[ OK ] %s connector added" % results.name)
                            except:
                                print("[ ERROR ] Error in add connector")
                                
                        elif sys.argv[2] == "del":
                            try:
                                for res in configData['connector']['aws']:
                                        if res['name'] == results.name:
                                                res1 = {}
                                                res1['name'] = res['name']
                                                res1['uid'] = res['uid']
                                                res1['url'] = res['url']
                                                res1['secret'] = res['secret']
                                                res1['region'] = res['region']
                                                configData['connector']['aws'].remove(res1)
                                                break
                                print("[ OK ] %s connector deleted" % results.name)
                            except:
                                print("[ ERROR ] Error in delete connector")
                                
                        else:
                                print("[ OK ] Select add/del option")
                                sys.exit(1)

                elif sys.argv[3] == "azure":
                        if sys.argv[2] == "add":
                            try:
                                name = results.name
                                reponame = results.reponame
                                uid = results.uid
                                secret = results.secret

                                res = {}
                                res['name'] = name
                                res['uid'] = uid
                                res['reponame'] = reponame
                                res['secret'] = secret

                                if 'azure' not in configData['connector']:
                                        configData['connector']['azure'] = []

                                if res not in configData['connector']['azure']:
                                        configData['connector']['azure'].append(res)

                                print("[ OK ] %s connector added" % results.name)
                            except:
                                print("[ ERROR ] Error in add connector")
                                
                        elif sys.argv[2] == "del":
                            try:
                                for res in configData['connector']['azure']:
                                        if res['name'] == results.name:
                                                res1 = {}
                                                res1['name'] = res['name']
                                                res1['uid'] = res['uid']
                                                res1['reponame'] = res['reponame']
                                                res1['secret'] = res['secret']
                                                configData['connector']['azure'].remove(res1)
                                                break
                                print("[ OK ] %s connector deleted" % results.name)
                            except:
                                print("[ ERROR ] Error in delete connector")
                                
                        else:
                                print("[ OK ] Select add/del option")
                                sys.exit(1)

                elif sys.argv[3] == "github":
                        if sys.argv[2] == "add":
                            try:
                                name = results.name
                                uid = results.uid
                                token = results.token
                                url = results.url

                                res = {}
                                res['name'] = name
                                res['token'] = token
                                res['uid'] = uid
                                res['url'] = url

                                if 'github' not in configData['connector']:
                                        configData['connector']['github'] = []

                                if res not in configData['connector']['github']:
                                        configData['connector']['github'].append(res)
                                
                                print("[ OK ] %s connector added" % results.name)

                            except:
                                print("[ ERROR ] Error in add connector")
                                
                        elif sys.argv[2] == "del":
                            try:
                                for res in configData['connector']['github']:
                                        if res['name'] == results.name:
                                                res1 = {}
                                                res1['name'] = res['name']
                                                res1['uid'] = res['uid']
                                                res1['token'] = res['token']
                                                configData['connector']['github'].remove(res1)
                                                break
                                print("[ OK ] %s connector deleted" % results.name)
                            except:
                                print("[ ERROR ] Error in delete connector")
                                
                        else:
                                print("[ OK ] Select add/del option")
                                sys.exit(1)

                with open('/tmp/niah.json', 'w') as f:
                        json.dump(configData, f)

        else:
                print("Use argument scan/auth/watch/connector")
                print("         scan - select scan option system/application/dependancies")
                print("         auth - to get auth token")
                print("         watch - to upload reports")
                print("         connector - add aws/auzre/docker/github connector")
                sys.exit(1)
                

